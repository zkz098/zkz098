{
    "version": "https://jsonfeed.org/version/1",
    "title": "Yume shoka",
    "subtitle": "kaitakuの博客",
    "icon": "https://www.kaitaku.xyz/images/favicon.ico",
    "description": "",
    "home_page_url": "https://www.kaitaku.xyz",
    "items": [
        {
            "id": "https://www.kaitaku.xyz/2022/01/15/python/easy/pythone5p/",
            "url": "https://www.kaitaku.xyz/2022/01/15/python/easy/pythone5p/",
            "title": "python小白篇5plus-常用模块",
            "date_published": "2022-01-15T12:57:43.000Z",
            "content_html": "<h1 id=\"random-随机数库\"><a class=\"anchor\" href=\"#random-随机数库\">#</a> random - 随机数库</h1>\n<h2 id=\"random方法\"><a class=\"anchor\" href=\"#random方法\">#</a> random 方法</h2>\n<pre><code class=\"language-python\">import random\n\na = random.random()\n</code></pre>\n<p><code>random()</code>  方法可以生成一个大于 0 小于 1 的浮点随机数<span class=\"spoiler\" title=\"你知道得太多了\">位数可能很长</span><br />\n通常使用 <code>round()</code>  方法来控制浮点数长度</p>\n<div class=\"note info\">\n<p><code>round(n,ndigits=x)</code>  为其调用方法，n 为数据，ndigits 为位数 <br />\n <code>round()</code>  方法遵循四舍五入原则<span class=\"spoiler\" title=\"你知道得太多了\">好用多了</span></p>\n</div>\n<div class=\"note info\">\n<p>python 使用模块前，需要先使用 <code>import</code>  关键字声明</p>\n</div>\n<h2 id=\"randint方法\"><a class=\"anchor\" href=\"#randint方法\">#</a> randint 方法</h2>\n<pre><code class=\"language-python\">import random\n\na = random.randint(0,10)\nprint(a) # 0-10随机数\n</code></pre>\n<p><code>randint(s,e)</code>  方法可以生成一个 s-e 区间内的随机整数</p>\n<div class=\"note warning\">\n<p><code>randint()</code>  含头含尾，会生成头数和尾数</p>\n</div>\n<div class=\"note info\">\n<p>由于 bool 类型是 int 的子类，所以 <code>randint(0,1)</code>  相当于 50% 概率为真，可以直接用在条件中，不需要 <code>==</code></p>\n</div>\n<h2 id=\"uniform方法\"><a class=\"anchor\" href=\"#uniform方法\">#</a> uniform 方法</h2>\n<pre><code class=\"language-python\">import random\n\na = random.uniform(0,10)\nprint(a) # 0-10随机浮点数\n</code></pre>\n<p><code>uniform()</code>  相当于一个带参数的 <code>random()</code>  方法</p>\n<div class=\"note info\">\n<p><code>uniform()</code>  的位数更<span class=\"spoiler\" title=\"你知道得太多了\">离谱</span>长，务必使用 <code>round()</code>  进行处理</p>\n</div>\n<h2 id=\"randrange方法\"><a class=\"anchor\" href=\"#randrange方法\">#</a> randrange 方法</h2>\n<pre><code class=\"language-python\">import random\n\na = random.randrange(0,10,2)\nprint(a) # 0-10的随机偶数\n</code></pre>\n<p><code>randrange()</code>  方法生成随机递增序列里的一个数，这个数一定是 <code>起始位+步长的倍数</code> <br />\n看不懂？让我们等量代换一下：</p>\n<pre><code class=\"language-python\">import random\n\nl = list(range(0,10,2))\nprint(random.choice(l)) # 随机从列表里选择一个数据,后面会讲到\n</code></pre>\n<p>这段代码与上面的结果是一致的，它的流程就是：</p>\n<ol>\n<li>生成一个符合输入参数的列表</li>\n<li>从列表里随机选择一个数</li>\n<li>返回这个数</li>\n</ol>\n<p>这里还有一个拆分更彻底的版本：</p>\n<pre><code class=\"language-python\">import random\n\n# 根据输入参数生成列表\nl = []\nfor i in range(0, 10, 2):\n    l.append(i)\n\n# 随机选择元素\nindex = random.randint(0, len(l) - 1)\nprint(l[index]) # 返回(输出)此元素\n</code></pre>\n<h2 id=\"shuffle和sample方法\"><a class=\"anchor\" href=\"#shuffle和sample方法\">#</a> shuffle 和 sample 方法</h2>\n<pre><code class=\"language-python\">import random\nl = [1,2,3,4,5]\nrandom.shuffle(l)\nprint(l)\nl = [1,2,3,4,5]\nr = random.sample(l,5)\nprint(r)\n</code></pre>\n<p><code>shuffle(seq)</code>  和 <code>sample(seq,k=len(seq))</code>  都可以随机打乱列表<br />\n但 shuffle 是在原列表上做操作，而 sample 则是返回一个新列表<br />\n <code>sample(seq,k=n&lt;len(seq)</code>  则可以从列表中随机提取长度为 n 的片段 (不连续)</p>\n<h2 id=\"choice和choices方法\"><a class=\"anchor\" href=\"#choice和choices方法\">#</a> choice 和 choices 方法</h2>\n<pre><code class=\"language-python\">import random\n\nl = [1,2,3,4,5]\nr = random.choice(l)\nprint(r)\nr1 = random.choices(l,k=3)\nprint(r1)\n</code></pre>\n<p><code>choice(seq)</code>  方法可以从列表中返回一个随机元素<br />\n <code>choices(seq,k=n)</code>  方法可以从列表中返回 k 个随机元素</p>\n<h1 id=\"string-字符串模块\"><a class=\"anchor\" href=\"#string-字符串模块\">#</a> string - 字符串模块</h1>\n<p><code>string.ascii_letters</code>  从字母 a-Z 的字符串<br />\n <code>string.ascii_lowercase</code>  从字母 a-z 的字符串<br />\n <code>string.ascii_uppercase</code>  从字母 A-Z 的字符串<br />\n <code>string.digits</code>  所有十进制常数<br />\n <code>string.punctuation</code>  所有在 ASCII 环境下被 C 认为标点的字符串</p>\n<h1 id=\"time-时间模块\"><a class=\"anchor\" href=\"#time-时间模块\">#</a> time - 时间模块</h1>\n<div class=\"note info\">\n<p>仅包含及其常用的方法，并不完整</p>\n</div>\n<h2 id=\"struct_time格式\"><a class=\"anchor\" href=\"#struct_time格式\">#</a> struct_time 格式</h2>\n<p><code>struct_time</code>  是 time 模块返回的常见序列，索引见下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">索引</th>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">tm_year (年)</td>\n<td style=\"text-align:center\">比如 2022</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">tm_mon (月)</td>\n<td style=\"text-align:center\">1-12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">tm_mday (日)</td>\n<td style=\"text-align:center\">1-31</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">tm_hour (时)</td>\n<td style=\"text-align:center\">0-23 (转换请 + 1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">tm_min (分)</td>\n<td style=\"text-align:center\">0-59 (同上)</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/14/python/easy/pythone5/",
            "url": "https://www.kaitaku.xyz/2022/01/14/python/easy/pythone5/",
            "title": "python小白篇5-容器数据类型与常用方法",
            "date_published": "2022-01-14T07:06:58.000Z",
            "content_html": "<h1 id=\"容器类型\"><a class=\"anchor\" href=\"#容器类型\">#</a> 容器类型</h1>\n<h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>python 中的 list 可以存储相同 (list1) 或不同的数据 (list2)<br />\n 列表结构类似于 C++ 的数组，但区别是 python 列表存放的是指针</p>\n<div class=\"note info\">\n<p>如果你认真看了第 4 篇，那你应该知道 python 中的变量大部分都是指针</p>\n</div>\n<p>这里有一段代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list2 <span class=\"token operator\">=</span> list1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 会输出什么？</span></pre></td></tr></table></figure><p>答案是 <code>[1, 2, 3, 4, 5]</code> , 这里就是 python 的一个坑了，list2 在目标改变后并不会改变指针 (或者说 list1 这个目标没有改变)<br />\n 所以 list1 会与 list2 同步 <br />\n解决方法就是使用下面的方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list2 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 在目标列表后加一个 [::]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>切片同样适用于列表，[::] 表示返回所有内容</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>list1 就是一个 <code>二维列表</code> ，访问第一个列表的第二个数据需要使用下列方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"切片补充\"><a class=\"anchor\" href=\"#切片补充\">#</a> 切片补充</h2>\n<p>切片可以使用 <code>list[索引]</code>  来返回特定位置的数据<br />\n同样可以使用切片来更改数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [7, 2, 3, 4]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 更改多个数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [7, 8, 3, 4]</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>更改多个数据等号后必须为<strong>可迭代数据</strong><br />\n python 的切片<strong>含头不含尾</strong></p>\n</div>\n<h2 id=\"成员判断符\"><a class=\"anchor\" href=\"#成员判断符\">#</a> 成员判断符</h2>\n<p>在 python 中可以使用 <code>in</code>  来判断元素是否位于目标容器中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token keyword\">in</span> list1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 输出 yes</span></pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tuple2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>python 中的元组 (tuple) 与 list 基本一致，但元组内的数据不可变<br />\n列表基本操作<strong>增删改查</strong>元组只支持<strong>查</strong>，举个栗子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>tuple1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 在第 2 行会报错：TypeError: 'tuple' object does not support item assignment</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>增删改查的方法会在后面的部分讲到</p>\n</div>\n<h2 id=\"字典\"><a class=\"anchor\" href=\"#字典\">#</a> 字典</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict1<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>字典是一种<strong>哈希结构</strong>，查询效率非常高 (接近 O (1))<br />\n 字典通过键值对来储存对象，像 dict1 中， <code>&quot;a&quot;</code>  对应 <code>1</code> <br />\n 列表和元组都可以转换为字典<br />\n列表转为字典：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'a': 1, 'b': 2&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>二维嵌套列表的 0 位为键，1 位为值</p>\n</div>\n<p>对字典添加或赋值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dict1<span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 左侧为键，右侧为值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;'orange', 'banana', 'apple'&#125;</span></pre></td></tr></table></figure><p>集合是无序、无索引的，不可以执行<strong>改</strong>这个操作</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>集合会自动对数字进行排序，去除重复项</p>\n</div>\n<h1 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h1>\n<h2 id=\"通用方法\"><a class=\"anchor\" href=\"#通用方法\">#</a> 通用方法</h2>\n<p><code>print() input()</code>  控制台的输出 / 入 <br />\n <code>len()</code>  返回参数的长度 (仅可用于可迭代对象) <br />\n <code>max() min()</code>  返回参数的最大 / 小值 <br />\n <code>str() int()...(对应的类型名称)</code>  把对象转换为对应类型 <br />\n <code>type()</code>  返回对象类型 <br />\n <code>del obj</code>  删除对象 (全局命令)</p>\n<h2 id=\"容器类型方法\"><a class=\"anchor\" href=\"#容器类型方法\">#</a> 容器类型方法</h2>\n<h3 id=\"列表元组\"><a class=\"anchor\" href=\"#列表元组\">#</a> 列表，元组</h3>\n<div class=\"note info\">\n<p>元组仅适用于<strong>查询</strong></p>\n</div>\n<h4 id=\"增加\"><a class=\"anchor\" href=\"#增加\">#</a> 增加</h4>\n<p><code>append()</code>  在末尾添加一个元素，能且只能添加一个元素 <br />\n <code>extend()</code>  在末尾添加多个元素，必须以可迭代形式填入 <br />\n <code>insert()</code>  在指定位置添加一个元素，可迭代元素会以嵌套的形式填入</p>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<p><code>remove()</code>  删除列表中的指定<strong>值</strong>，不存在会返回错误 <br />\n <code>pop()</code>  删除列表中的指定<strong>索引</strong> (不指定删除 - 1 位元素), 并<strong>返回</strong>这个元素 <br />\n <code>del 对象[索引]</code>  删除指定索引的元素，索引超出列表会报错 <br />\n <code>clear()</code>  情空整个列表</p>\n<h4 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h4>\n<p><code>对象[索引] = 变量</code> 修改指定索引的元素 <br />\n <code>sort()</code>  对列表进行排序</p>\n<div class=\"note info\">\n<p>python 使用 <code>TimSort</code>  进行排序</p>\n</div>\n<h4 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h4>\n<p><code>index()</code>  返回查询值的索引，不存在会报错<br />\n <code>count()</code>  统计固定值的出现次数</p>\n<h3 id=\"字典-2\"><a class=\"anchor\" href=\"#字典-2\">#</a> 字典</h3>\n<h4 id=\"增加修改\"><a class=\"anchor\" href=\"#增加修改\">#</a> 增加，修改</h4>\n<p><code>dict[键]=值</code> 对指定对象赋值 (不存在创建新键值对) <br />\n <code>update()</code>  使用键值对更新字典</p>\n<div class=\"note info\">\n<p>字典和列表的复制一样，需要使用 <code>copy</code>  进行复制</p>\n</div>\n<h4 id=\"删除-2\"><a class=\"anchor\" href=\"#删除-2\">#</a> 删除</h4>\n<p><code>pop()</code>  删除指定键的键值对 <br />\n <code>popitem()</code>  删除最后添加的项目 (3.7 之前会删除随机项目) <br />\n <code>del dict[键]</code>  删除指定键的键值对<br />\n <code>clear()</code>  清除这个字典</p>\n<h4 id=\"查询-2\"><a class=\"anchor\" href=\"#查询-2\">#</a> 查询</h4>\n<p><code>get()</code>  获取指定键的值<br />\n <code>values() keys()</code>  获取所有的键 / 值<br />\n <code>items()</code>  返回所有键值对</p>\n<h3 id=\"集合-2\"><a class=\"anchor\" href=\"#集合-2\">#</a> 集合</h3>\n<h4 id=\"增加-2\"><a class=\"anchor\" href=\"#增加-2\">#</a> 增加</h4>\n<p><code>add()</code>  添加一个元素 <br />\n <code>update()</code>  添加多个元素 (可迭代)</p>\n<h4 id=\"删除-3\"><a class=\"anchor\" href=\"#删除-3\">#</a> 删除</h4>\n<p><code>remove()</code>  删除列表中的指定<strong>值</strong>，不存在会返回错误 <br />\n <code>discard()</code>  删除列表中的指定<strong>值</strong>，不会返回错误<br />\n <code>pop()</code>  删除并返回随机元素<br />\n <code>clear()</code>  清除这个集合</p>\n<div class=\"note info\">\n<p>集合只能遍历，无法查询和使用索引</p>\n</div>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/13/mcipv6/",
            "url": "https://www.kaitaku.xyz/2022/01/13/mcipv6/",
            "title": "MC-IPV6联机",
            "date_published": "2022-01-13T12:39:43.000Z",
            "content_html": "<h1 id=\"开始前的准备\"><a class=\"anchor\" href=\"#开始前的准备\">#</a> 开始前的准备</h1>\n<h2 id=\"游戏本体\"><a class=\"anchor\" href=\"#游戏本体\">#</a> 游戏本体</h2>\n<p>首先，双方需要使用一样的游戏版本和 ModLoader<br />\n 推荐直接将游戏打包后发给对方</p>\n<div class=\"note info\">\n<p>玩原版也需要安装 Forge/Fabric (后续步骤需要使用)</p>\n</div>\n<p>如果需要安装模组，需要查看模组安装需求 (建议在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24v\"> MCMOD 百科</span>查看)<br />\n 分为以下几种情况：</p>\n<ol>\n<li>客户端需装，服务端需装</li>\n<li>客户端选装，服务端需装</li>\n<li>客户端需装，服务端选装</li>\n<li>客户端需装，服务端无效</li>\n<li>客户端无效，服务端需装</li>\n</ol>\n<p>1.2.3 情况建议双方都安装此模组</p>\n<div class=\"note info\">\n<p>2. 情况主机端必装，其他人不装可能有影响<br />\n 3. 情况所有人最好都装</p>\n</div>\n<p>4.5 情况无效端不需要装</p>\n<div class=\"note primary\">\n<p>那么，什么是服务端和客户端？<br />\n假设 S 为存档拥有者，C 为加入的玩家 <br />\n即 S 为服务端 + 客户端，C 为客户端</p>\n</div>\n<h2 id=\"游戏模组\"><a class=\"anchor\" href=\"#游戏模组\">#</a> 游戏模组</h2>\n<p>版本截至 2022-1-13 时 <br />\n安装对应版本的模组 (服务端，客户端均需)：</p>\n<ul>\n<li>1.15.2-1.18.1(forge/fabric)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24vY2xhc3MvNDQ5OC5odG1s\">MCMOD 百科</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2RyaW50aC5jb20vbW9kL21jd2lmaXBucA==\">modrinth</span></li>\n<li>1.12.2-1.17.1(forge)/1.14.4-1.17.1(fabric)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24vY2xhc3MvMjc1NC5odG1s\">MCMOD 百科</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3Vyc2Vmb3JnZS5jb20vbWluZWNyYWZ0L21jLW1vZHMvbGFuLXNlcnZlci1wcm9wZXJ0aWVz\">CurseForge</span></li>\n<li>1.7.2-1.12.2(forge)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24vY2xhc3MvMTE1OC5odG1s\">MCMOD 百科</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9taW5lY3JhZnQuY3Vyc2Vmb3JnZS5jb20vcHJvamVjdHMvc2VydmVyLXByb3BlcnRpZXMtZm9yLWxhbg==\">CurseForge</span>,</li>\n</ul>\n<p>如果你是离线登录，需要将 <code>OnlineMode</code>  更改为 <code>false</code> , 具体配置文件更改请参阅 MCMOD 百科<br />\n建议安装第一个模组，有 GUI 页面</p>\n<h2 id=\"ipv6\"><a class=\"anchor\" href=\"#ipv6\">#</a> IPV6</h2>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3RpcHY2LmNuLw==\">ipv6test</span> 来检测双方的 IPV6<br />\n 如果一切正常，你看到的页面应该类似于这样：<br />\n<img data-src=\"https://s2.loli.net/2022/01/13/BTxRUH26vQDN7yC.png\" alt=\"b.png\" /><br />\n 底部应该是 10/10, 作者的 DNSv6 不太正常<br />\n然后检查 IPV6 的 IP, 以下有几个 IP 开头的意义：</p>\n<ul>\n<li>fe80 开头的无法用于上网，作用就是有个 IP</li>\n<li>2001 开头为 teredo, 不建议用于联机</li>\n<li>240e、2409、2408 为国内三大运营商的 IPV6, 非常正常</li>\n<li>其他开头请见下一步</li>\n</ul>\n<p>如果属于 fe80 或 2001 开头建议使用 <code>内网穿透</code> 而非 IPV6<br />\n<span class=\"spoiler\" title=\"你知道得太多了\"> 内网穿透短期不考虑出教程</span></p>\n<p>确定 IP 后使用 <code>ping</code>  指令 ping 一下对方，格式：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ping 对方 IP</pre></td></tr></table></figure><p>如果有链接超时或多数大于 250ms 就不建议使用此方法了<br />\n如果可以链接成功，就可以进入下一步了</p>\n<h1 id=\"加入世界\"><a class=\"anchor\" href=\"#加入世界\">#</a> 加入世界</h1>\n<p>这一步非常的简单：<br />\n服务端：单人游戏，进入存档后点击对局域网开放，记录下端口号<br />\n客户端：启动游戏后，点击多人游戏，直接连接，使用以下格式连接：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[ipv6 地址]: 端口号</pre></td></tr></table></figure><p>然后应该就可以快乐的联机了，出现错误请评论或自行百度解决</p>\n",
            "tags": [
                "MC",
                "MC"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/13/python/easy/pythone4/",
            "url": "https://www.kaitaku.xyz/2022/01/13/python/easy/pythone4/",
            "title": "python小白篇4-循环与基础类型",
            "date_published": "2022-01-13T02:46:48.000Z",
            "content_html": "<h1 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h1>\n<h2 id=\"while循环\"><a class=\"anchor\" href=\"#while循环\">#</a> while 循环</h2>\n<p>假设有这样一道题：输出 1-10 的所有数字。 <br />\n你会怎么做，像这样吗：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这时就要使用 python 中的 while 循环<br />\n语法如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> 条件<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 条件为真继续循环，为假跳出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr></table></figure><p>使用 while 循环优化后：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>循环中创建的变量在循环外访问，可能导致变量未定义</p>\n</div>\n<h2 id=\"跳出和跳过\"><a class=\"anchor\" href=\"#跳出和跳过\">#</a> 跳出和跳过</h2>\n<p>还是这样一道题：输出 1-10 的数字，不输出 5<br />\n 你可以做多个循环，像这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但 python 中提供了循环控制符: <code>break</code>  和 <code>continue</code>  <br />\nbreak 可以跳出循环，continue 可以跳过循环 \\</p>\n<div class=\"note info\">\n<p><code>break</code>  至多跳出一层循环，多次需要多个 break</p>\n</div>\n<p>现在用 continue 来优化一下代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>在部分情况下 <code>if...continue</code>  的性能可能不如两个循环 (微乎其微的影响)</p>\n</div>\n<h2 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h2>\n<p>还是这道题</p>\n<blockquote>\n<p>输出 1-10 的所有数字。</p>\n</blockquote>\n<p>这回使用 <code>for</code>  循环解决</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>for 循环的语法如下：<br />\n <code>for 变量 in 序列(可迭代的):</code>  <br />\n <code>range(头,尾)</code>  方法可以生成一个从头到尾 - 1 的数字序列</p>\n<div class=\"note info\">\n<p>range () 方法含头不含尾，需要调整参数</p>\n</div>\n<p>当然， <code>break</code>  和 <code>continue</code>  也适用与 for 循环<br />\n但 for 循环主要用于以下场景中：</p>\n<blockquote>\n<p>遍历一个长度为 x 的可迭代数据；<br />\n生成一个符合条件的序列；</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5 6 7 8 9</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>print 的 end 参数指定结尾输出什么，默认为 '\\n'(换行符)</p>\n</div>\n<p>容器类型的数据将会在 5 篇讲<span class=\"spoiler\" title=\"你知道得太多了\">又一个坑</span></p>\n<div class=\"note primary\">\n<p>for 循环不如 while 循环灵活，尽量多使用 while 循环</p>\n</div>\n<div class=\"note warning\">\n<p>else 并非分支结构专用，在循环后使用 else 代表正常退出循环后执行代码 <br />\n正常退出循环：不使用 <code>break</code>  或报错退出</p>\n</div>\n<h1 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h1>\n<h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2>\n<p>python 解释器使用指针来复用对象，节省内存，如下面所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>b <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 假设 10 的内存地址为 0x10f 假设 5 为 0x10d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0x10f 0x10f</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 实际只占用了一个内存地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># b 的指针会被切换为 0x10d, 老指针会被自动回收</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0x10f 0x10d</span></pre></td></tr></table></figure><h2 id=\"int型\"><a class=\"anchor\" href=\"#int型\">#</a> int 型</h2>\n<p>python 中的 int 不分长短型，不可迭代 (不可被 for 遍历)</p>\n<div class=\"note info\">\n<p>从 float 到 int 是向下取整，1.99-&gt;1</p>\n</div>\n<h2 id=\"float型\"><a class=\"anchor\" href=\"#float型\">#</a> float 型</h2>\n<p>python 中的 float 约等于 C 中的 long double, 无位数限制，不可迭代</p>\n<div class=\"note info\">\n<p>float 有不确定小数后缀，最好不要使用 <code>==</code>  比较</p>\n</div>\n<h2 id=\"str型\"><a class=\"anchor\" href=\"#str型\">#</a> str 型</h2>\n<p>str 型为字符串，可迭代，长度不限</p>\n<h3 id=\"切片\"><a class=\"anchor\" href=\"#切片\">#</a> 切片</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"p\"</span></pre></td></tr></table></figure><p>索引如下所示：</p>\n<blockquote>\n<p>p  y  t  h  o  n 字符串 <br />\n0  1  2  3  4  5 正向索引 <br />\n-6 -5 -4 -3 -2 -1 反向索引</p>\n</blockquote>\n<p>切片的语法格式： <code>str[开始:结束:步长]</code> <br />\n 举个例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 pto</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 nohtyp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 yt</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p>这个方法通常用于计算回文数： <code>str(n) == str(n)[::-1]</code></p>\n</div>\n<h3 id=\"格式化输出\"><a class=\"anchor\" href=\"#格式化输出\">#</a> 格式化输出</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># % 式格式化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数是:%d\"</span><span class=\"token operator\">%</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 这个数是：10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># format 格式化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数是:&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># f-string 格式化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"这个数是:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>% 式格式化如果有多个实参，需要用括号括起来</p>\n</div>\n<h2 id=\"bool型\"><a class=\"anchor\" href=\"#bool型\">#</a> bool 型</h2>\n<p>bool 是 int 型的子类，不可迭代，只有 True 和 False 两种</p>\n<div class=\"note info\">\n<p>0=False 1=True 2 及以上同理</p>\n</div>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/12/python/easy/pythone3/",
            "url": "https://www.kaitaku.xyz/2022/01/12/python/easy/pythone3/",
            "title": "python小白篇3-运算与分支",
            "date_published": "2022-01-12T10:43:36.000Z",
            "content_html": "<h1 id=\"逻辑与比较运算符\"><a class=\"anchor\" href=\"#逻辑与比较运算符\">#</a> 逻辑与比较运算符</h1>\n<h2 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h2>\n<p>在 python 中，逻辑运算符有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号英文</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">两真为真，一假为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:center\">一真为真，两假为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:center\">非真即假</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\">\n<p>python 中的逻辑运算符有优先级，not &gt; and &gt; or, 括号可以改变优先级</p>\n</div>\n<h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<p>基本运算符：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">举例</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">相加</td>\n<td style=\"text-align:center\">1+1=2</td>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:center\">自增操作</td>\n<td style=\"text-align:center\">i += 1(i=i+1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">相减</td>\n<td style=\"text-align:center\">2-1=1</td>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:center\">自减操作</td>\n<td style=\"text-align:center\">i -= 1(i=i-1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">相乘</td>\n<td style=\"text-align:center\">2*3=6</td>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:center\">乘方</td>\n<td style=\"text-align:center\">2**3=8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">相除</td>\n<td style=\"text-align:center\">3/2=1.5</td>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:center\">整除</td>\n<td style=\"text-align:center\">3//2=1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">求余</td>\n<td style=\"text-align:center\">3%2=1</td>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:center\">自乘操作</td>\n<td style=\"text-align:center\">a *= 2</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note info\">\n<p>python 中的运算遵循四则运算顺序，可以用括号更改优先级</p>\n</div>\n<p>在 python 中可以对字符串进行加乘操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>u <span class=\"token operator\">=</span> u<span class=\"token operator\">*</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"pythonpythonpython\"</span></pre></td></tr></table></figure><h2 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">比较大于</td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">比较小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于等于</td>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">相等</td>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:center\">不等</td>\n</tr>\n</tbody>\n</table>\n<p>比较运算符返回值均为 bool 类型，非真即假<br />\n部分类无法进行比较</p>\n<h1 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h1>\n<h2 id=\"单分支与双分支\"><a class=\"anchor\" href=\"#单分支与双分支\">#</a> 单分支与双分支</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入一个数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> u <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数大于等于1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数小于1\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>这样的结构就是双分支，只有 if 就是单分支</p>\n</div>\n<p>在 python 中，if 的语法是这样的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> 条件<span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果真</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果假</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    语句</pre></td></tr></table></figure><p>python 依靠缩进来识别代码文件，所以代码必须使用缩进，建议使用以下几种格式：</p>\n<ul>\n<li>一个空格 (不推荐)</li>\n<li>一个 Tab</li>\n<li>四个空格</li>\n</ul>\n<p>尽量全部使用同一种进行缩进</p>\n<h2 id=\"多分支\"><a class=\"anchor\" href=\"#多分支\">#</a> 多分支</h2>\n<h3 id=\"if-elif型\"><a class=\"anchor\" href=\"#if-elif型\">#</a> if elif 型</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1-3的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">elif</span> u <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">elif</span> u <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知数字\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 python 中，多分支结构使用 <code>elif</code>  进行判断，使用规则同 if<br />\n 下面两幅图为双分支和多分支的区别：<br />\n<img data-src=\"https://s2.loli.net/2022/01/12/sdjSE6kUNaKGLhP.png\" alt=\"a.png\" /></p>\n<div class=\"note info\">\n<p>在一个多分支中只会执行一个代码块 (最早的那一个)<br />\n 所以有时会有 <code>if...if...</code>  这种写法，就可以执行多个代码块</p>\n</div>\n<h3 id=\"match-case型\"><a class=\"anchor\" href=\"#match-case型\">#</a> match case 型</h3>\n<p><strong>本条语法仅适用于 python3.10 以上，3.9 及以下请用 <code>elif多分支结构</code> </strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1-3的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>match u<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    case <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    case <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    case <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    case _<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知数字\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>match case</code>  语法不同于 C 的 <code>switch case</code>  语句，<br />\n 拥有更加强大的<strong>模式匹配</strong>功能，未来会考虑出一篇专题<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">作者也没研究透</span></p>\n<h1 id=\"练习题\"><a class=\"anchor\" href=\"#练习题\">#</a> 练习题</h1>\n<ol>\n<li class=\"quiz\">以下哪个选项错误 <span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>分支结构有单双多三种</li>\n<li>一个分支结构块只能执行一个代码块</li>\n<li class=\"correct\"><code>match case</code>  与 <code>switch case</code>  没有区别</li>\n<li>!= 是不等号</li>\n</ul>\n</li>\n</ol>\n<p><span class=\"spoiler\" title=\"你知道得太多了\">预告：下节是循环</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/11/python/easy/pythone2/",
            "url": "https://www.kaitaku.xyz/2022/01/11/python/easy/pythone2/",
            "title": "python小白篇2-类型与变量",
            "date_published": "2022-01-11T08:24:23.000Z",
            "content_html": "<h1 id=\"输出一段文字\"><a class=\"anchor\" href=\"#输出一段文字\">#</a> 输出一段文字</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>print 为输出函数，会将括号内的值输出 <br />\n&quot;hello world&quot; 为传入的值，类型为字符串 <br />\n字符串内可以存储绝大部分文本 <br />\npython 的字符串可以用双引号或单引号括起来<br />\n行末不需要分号或逗号，但这样也可以:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"python中的变量\"><a class=\"anchor\" href=\"#python中的变量\">#</a> python 中的变量</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a word\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 输出值为: This is a word</span></pre></td></tr></table></figure><p>在本段代码中 &quot;a&quot; 即为变量 <br />\npython 中的变量不需要提前声明类型，需要时定义即可 <br />\n赋值语法：变量名 = 值 <br />\n变量名规则：</p>\n<ul>\n<li>不可以以数字开头，例如 5count 就是错误的</li>\n<li>只能有字母、数字和下划线，例如 a#b 就是错误的</li>\n<li>不可以以关键字开头，例如 import = 0 就是错误的</li>\n<li>最好不要与函数重名，例如:</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>Pycharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 返回错误：TypeError: 'int' object is not callable</span></pre></td></tr></table></figure><p>python 的数据类型是可变的，但部分类型无法互相转换 (见 3 部分) <br />\n因此，这样的代码是合法的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>Pycharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2.25</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 输出值为 2.25</span></pre></td></tr></table></figure><h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">转换函数</th>\n<th style=\"text-align:center\">用法</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">int()</td>\n<td style=\"text-align:center\">储存整数</td>\n<td style=\"text-align:center\">114514</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">float()</td>\n<td style=\"text-align:center\">储存小数</td>\n<td style=\"text-align:center\">810.1919</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bool</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">储存真假值</td>\n<td style=\"text-align:center\">True/False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str</td>\n<td style=\"text-align:center\">str()</td>\n<td style=\"text-align:center\">储存字符串</td>\n<td style=\"text-align:center\">&quot;python&quot;</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"容器数据类型\"><a class=\"anchor\" href=\"#容器数据类型\">#</a> 容器数据类型</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">定义方法</th>\n<th style=\"text-align:center\">转换方法</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:center\">[列表] 或 list ()</td>\n<td style=\"text-align:center\">list()</td>\n<td style=\"text-align:center\">[1,2,3,4]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tuple</td>\n<td style=\"text-align:center\">(列表) 或 tuple ()</td>\n<td style=\"text-align:center\">tuple()</td>\n<td style=\"text-align:center\">(1,2,3,4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dict</td>\n<td style=\"text-align:center\">{键：值} 或 dict ()</td>\n<td style=\"text-align:center\">dict()</td>\n<td style=\"text-align:center\">由于 MD 无法显示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set</td>\n<td style=\"text-align:center\">{值} 或 set ()</td>\n<td style=\"text-align:center\">set()</td>\n<td style=\"text-align:center\">由于 MD 无法显示</td>\n</tr>\n</tbody>\n</table>\n<p>数据类型会专门开一篇<span class=\"spoiler\" title=\"你知道得太多了\">字太多了</span></p>\n<h1 id=\"输入和类型\"><a class=\"anchor\" href=\"#输入和类型\">#</a> 输入和类型</h1>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入字符串:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>input () 方法可以实现控制台输入 <br />\n括号内的内容为输入提示语 \\</p>\n<div class=\"note info\">\n<p>input 方法输入的始终为字符串，需要进行类型转换</p>\n</div>\n<h2 id=\"类型判断\"><a class=\"anchor\" href=\"#类型判断\">#</a> 类型判断</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class:'int'></span></pre></td></tr></table></figure><p>type 方法可以返回变量的类型</p>\n<div class=\"note info\">\n<p>type 方法输出的和返回的并不一致，返回的是类名，见下列代码</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 输出 yes</span></pre></td></tr></table></figure><p>第三篇是分支结构<span class=\"spoiler\" title=\"你知道得太多了\"> x 年后更新</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/10/python/easy/pythone1/",
            "url": "https://www.kaitaku.xyz/2022/01/10/python/easy/pythone1/",
            "title": "python小白篇1-安装与配置",
            "date_published": "2022-01-10T11:26:33.000Z",
            "content_html": "<h1 id=\"步骤1安装python解释器\"><a class=\"anchor\" href=\"#步骤1安装python解释器\">#</a> 步骤 1. 安装 python 解释器</h1>\n<p>前往 python 官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy8=\"> 点我直达</span><br />\n选择 Download,All releases,3.10.1 <br />\n请使用 IDM 系多线程下载器<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">不使用也能在 3022 年前下载完</span></p>\n<div class=\"note info\">\n<p>如果下载过于缓慢，试一下蓝奏云链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWl0YWt1LmxhbnpvdW8uY29tL2IwMzBuMzdhaA==\">点我跳转</span><br />\n密码:ktks (文件夹 + 文件)</p>\n</div>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/NXaQOKqzLld9h4E.png\" alt=\"step1.png\" /><br />\n 在此界面中勾选 Add Python 3.10 to PATH <br />\n按下 Install Now 安装，完成后按 Close</p>\n<h1 id=\"步骤2安装pycharm\"><a class=\"anchor\" href=\"#步骤2安装pycharm\">#</a> 步骤 2. 安装 pycharm</h1>\n<p>前往 jetbrains 官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9weWNoYXJtLw==\"> 点我直达</span><br />\n<span class=\"spoiler\" title=\"你知道得太多了\">中文界面还看不懂？</span><br />\n<img data-src=\"https://s2.loli.net/2022/01/10/K5qrbPf9NOZLTyw.png\" alt=\"step2.png\" /><br />\n 选择社区版进行安装 <br />\n安装过程就不说了 (应该能看懂)</p>\n<h1 id=\"步骤3配置pycharm\"><a class=\"anchor\" href=\"#步骤3配置pycharm\">#</a> 步骤 3. 配置 pycharm</h1>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/gbm3Dn2CO8LjUEa.jpg\" alt=\"step3.jpg\" /><br />\n 单击设置 (位置相同，但应该是英文)<br />\n<img data-src=\"https://s2.loli.net/2022/01/10/PLgQeUV35nYWpsF.jpg\" alt=\"step4.jpg\" /><br />\n 选择左侧选项，搜索 Chi, 选择左侧插件安装，重启 Pycharm</p>\n<h1 id=\"步骤4创建新项目\"><a class=\"anchor\" href=\"#步骤4创建新项目\">#</a> 步骤 4. 创建新项目</h1>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/gwzUaXv4WdMY8mP.png\" alt=\"无标题.png\" /><br />\n<span class=\"spoiler\" title=\"你知道得太多了\"> 应该看图就能懂</span><br />\n<img data-src=\"https://s2.loli.net/2022/01/10/XGQxLtjckfCI3ao.png\" alt=\"无标题.png\" /><br />\n 创建新文件 (文件名不要使用 abc)</p>\n<p>正经的编程内容请见二篇</p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        }
    ]
}