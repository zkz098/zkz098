{
    "version": "https://jsonfeed.org/version/1",
    "title": "Yume shoka",
    "subtitle": "kaitakuの博客",
    "icon": "https://www.kaitaku.xyz/images/favicon.ico",
    "description": "",
    "home_page_url": "https://www.kaitaku.xyz",
    "items": [
        {
            "id": "https://www.kaitaku.xyz/2022/01/13/python/easy/pythone4/",
            "url": "https://www.kaitaku.xyz/2022/01/13/python/easy/pythone4/",
            "title": "python小白篇4-循环与基础类型",
            "date_published": "2022-01-13T02:46:48.000Z",
            "content_html": "<h1 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h1>\n<h2 id=\"while循环\"><a class=\"anchor\" href=\"#while循环\">#</a> while 循环</h2>\n<p>假设有这样一道题：输出 1-10 的所有数字。 <br />\n你会怎么做，像这样吗：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这时就要使用 python 中的 while 循环<br />\n语法如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> 条件<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 条件为真继续循环，为假跳出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr></table></figure><p>使用 while 循环优化后：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>循环中创建的变量在循环外访问，可能导致变量未定义</p>\n</div>\n<h2 id=\"跳出和跳过\"><a class=\"anchor\" href=\"#跳出和跳过\">#</a> 跳出和跳过</h2>\n<p>还是这样一道题：输出 1-10 的数字，不输出 5<br />\n 你可以做多个循环，像这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但 python 中提供了循环控制符: <code>break</code>  和 <code>continue</code>  <br />\nbreak 可以跳出循环，continue 可以跳过循环 \\</p>\n<div class=\"note info\">\n<p><code>break</code>  至多跳出一层循环，多次需要多个 break</p>\n</div>\n<p>现在用 continue 来优化一下代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>在部分情况下 <code>if...continue</code>  的性能可能不如两个循环 (微乎其微的影响)</p>\n</div>\n<h2 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h2>\n<p>还是这道题</p>\n<blockquote>\n<p>输出 1-10 的所有数字。</p>\n</blockquote>\n<p>这回使用 <code>for</code>  循环解决</p>\n<p><strong>本文尚未完成</strong></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/12/python/easy/pythone3/",
            "url": "https://www.kaitaku.xyz/2022/01/12/python/easy/pythone3/",
            "title": "python小白篇3-运算与分支",
            "date_published": "2022-01-12T10:43:36.000Z",
            "content_html": "<h1 id=\"逻辑与比较运算符\"><a class=\"anchor\" href=\"#逻辑与比较运算符\">#</a> 逻辑与比较运算符</h1>\n<h2 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h2>\n<p>在 python 中，逻辑运算符有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号英文</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">两真为真，一假为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:center\">一真为真，两假为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:center\">非真即假</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\">\n<p>python 中的逻辑运算符有优先级，not &gt; and &gt; or, 括号可以改变优先级</p>\n</div>\n<h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<p>基本运算符：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">举例</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">相加</td>\n<td style=\"text-align:center\">1+1=2</td>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:center\">自增操作</td>\n<td style=\"text-align:center\">i += 1(i=i+1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">相减</td>\n<td style=\"text-align:center\">2-1=1</td>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:center\">自减操作</td>\n<td style=\"text-align:center\">i -= 1(i=i-1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">相乘</td>\n<td style=\"text-align:center\">2*3=6</td>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:center\">乘方</td>\n<td style=\"text-align:center\">2**3=8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">相除</td>\n<td style=\"text-align:center\">3/2=1.5</td>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:center\">整除</td>\n<td style=\"text-align:center\">3//2=1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">求余</td>\n<td style=\"text-align:center\">3%2=1</td>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:center\">自乘操作</td>\n<td style=\"text-align:center\">a *= 2</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note info\">\n<p>python 中的运算遵循四则运算顺序，可以用括号更改优先级</p>\n</div>\n<p>在 python 中可以对字符串进行加乘操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>u <span class=\"token operator\">=</span> u<span class=\"token operator\">*</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"pythonpythonpython\"</span></pre></td></tr></table></figure><h2 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">比较大于</td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">比较小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于等于</td>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">相等</td>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:center\">不等</td>\n</tr>\n</tbody>\n</table>\n<p>比较运算符返回值均为 bool 类型，非真即假<br />\n部分类无法进行比较</p>\n<h1 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h1>\n<h2 id=\"单分支与双分支\"><a class=\"anchor\" href=\"#单分支与双分支\">#</a> 单分支与双分支</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入一个数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> u <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数大于等于1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数小于1\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>这样的结构就是双分支，只有 if 就是单分支</p>\n</div>\n<p>在 python 中，if 的语法是这样的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> 条件<span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果真</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果假</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    语句</pre></td></tr></table></figure><p>python 依靠缩进来识别代码文件，所以代码必须使用缩进，建议使用以下几种格式：</p>\n<ul>\n<li>一个空格 (不推荐)</li>\n<li>一个 Tab</li>\n<li>四个空格</li>\n</ul>\n<p>尽量全部使用同一种进行缩进</p>\n<h2 id=\"多分支\"><a class=\"anchor\" href=\"#多分支\">#</a> 多分支</h2>\n<h3 id=\"if-elif型\"><a class=\"anchor\" href=\"#if-elif型\">#</a> if elif 型</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1-3的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">elif</span> u <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">elif</span> u <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知数字\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 python 中，多分支结构使用 <code>elif</code>  进行判断，使用规则同 if<br />\n 下面两幅图为双分支和多分支的区别：<br />\n<img data-src=\"https://s2.loli.net/2022/01/12/sdjSE6kUNaKGLhP.png\" alt=\"a.png\" /></p>\n<div class=\"note info\">\n<p>在一个多分支中只会执行一个代码块 (最早的那一个)<br />\n 所以有时会有 <code>if...if...</code>  这种写法，就可以执行多个代码块</p>\n</div>\n<h3 id=\"match-case型\"><a class=\"anchor\" href=\"#match-case型\">#</a> match case 型</h3>\n<p><strong>本条语法仅适用于 python3.10 以上，3.9 及以下请用 <code>elif多分支结构</code> </strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1-3的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>match u<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    case <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    case <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    case <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    case _<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知数字\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>match case</code>  语法不同于 C 的 <code>switch case</code>  语句，<br />\n 拥有更加强大的<strong>模式匹配</strong>功能，未来会考虑出一篇专题<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">作者也没研究透</span></p>\n<h1 id=\"练习题\"><a class=\"anchor\" href=\"#练习题\">#</a> 练习题</h1>\n<ol>\n<li class=\"quiz\">以下哪个选项错误 <span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>分支结构有单双多三种</li>\n<li>一个分支结构块只能执行一个代码块</li>\n<li class=\"correct\"><code>match case</code>  与 <code>switch case</code>  没有区别</li>\n<li>!= 是不等号</li>\n</ul>\n</li>\n</ol>\n<p><span class=\"spoiler\" title=\"你知道得太多了\">预告：下节是循环</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/11/python/easy/pythone2/",
            "url": "https://www.kaitaku.xyz/2022/01/11/python/easy/pythone2/",
            "title": "python小白篇2-类型与变量",
            "date_published": "2022-01-11T08:24:23.000Z",
            "content_html": "<h1 id=\"输出一段文字\"><a class=\"anchor\" href=\"#输出一段文字\">#</a> 输出一段文字</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>print 为输出函数，会将括号内的值输出 <br />\n&quot;hello world&quot; 为传入的值，类型为字符串 <br />\n字符串内可以存储绝大部分文本 <br />\npython 的字符串可以用双引号或单引号括起来<br />\n行末不需要分号或逗号，但这样也可以:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"python中的变量\"><a class=\"anchor\" href=\"#python中的变量\">#</a> python 中的变量</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a word\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 输出值为: This is a word</span></pre></td></tr></table></figure><p>在本段代码中 &quot;a&quot; 即为变量 <br />\npython 中的变量不需要提前声明类型，需要时定义即可 <br />\n赋值语法：变量名 = 值 <br />\n变量名规则：</p>\n<ul>\n<li>不可以以数字开头，例如 5count 就是错误的</li>\n<li>只能有字母、数字和下划线，例如 a#b 就是错误的</li>\n<li>不可以以关键字开头，例如 import = 0 就是错误的</li>\n<li>最好不要与函数重名，例如:</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>Pycharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 返回错误：TypeError: 'int' object is not callable</span></pre></td></tr></table></figure><p>python 的数据类型是可变的，但部分类型无法互相转换 (见 3 部分) <br />\n因此，这样的代码是合法的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>Pycharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2.25</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 输出值为 2.25</span></pre></td></tr></table></figure><h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">转换函数</th>\n<th style=\"text-align:center\">用法</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">int()</td>\n<td style=\"text-align:center\">储存整数</td>\n<td style=\"text-align:center\">114514</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">float()</td>\n<td style=\"text-align:center\">储存小数</td>\n<td style=\"text-align:center\">810.1919</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bool</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">储存真假值</td>\n<td style=\"text-align:center\">True/False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str</td>\n<td style=\"text-align:center\">str()</td>\n<td style=\"text-align:center\">储存字符串</td>\n<td style=\"text-align:center\">&quot;python&quot;</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"容器数据类型\"><a class=\"anchor\" href=\"#容器数据类型\">#</a> 容器数据类型</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">定义方法</th>\n<th style=\"text-align:center\">转换方法</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:center\">[列表] 或 list ()</td>\n<td style=\"text-align:center\">list()</td>\n<td style=\"text-align:center\">[1,2,3,4]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tuple</td>\n<td style=\"text-align:center\">(列表) 或 tuple ()</td>\n<td style=\"text-align:center\">tuple()</td>\n<td style=\"text-align:center\">(1,2,3,4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dict</td>\n<td style=\"text-align:center\">{键：值} 或 dict ()</td>\n<td style=\"text-align:center\">dict()</td>\n<td style=\"text-align:center\">由于 MD 无法显示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set</td>\n<td style=\"text-align:center\">{值} 或 set ()</td>\n<td style=\"text-align:center\">set()</td>\n<td style=\"text-align:center\">由于 MD 无法显示</td>\n</tr>\n</tbody>\n</table>\n<p>数据类型会专门开一篇<span class=\"spoiler\" title=\"你知道得太多了\">字太多了</span></p>\n<h1 id=\"输入和类型\"><a class=\"anchor\" href=\"#输入和类型\">#</a> 输入和类型</h1>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入字符串:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>input () 方法可以实现控制台输入 <br />\n括号内的内容为输入提示语 \\</p>\n<div class=\"note info\">\n<p>input 方法输入的始终为字符串，需要进行类型转换</p>\n</div>\n<h2 id=\"类型判断\"><a class=\"anchor\" href=\"#类型判断\">#</a> 类型判断</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class:'int'></span></pre></td></tr></table></figure><p>type 方法可以返回变量的类型</p>\n<div class=\"note info\">\n<p>type 方法输出的和返回的并不一致，返回的是类名，见下列代码</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 输出 yes</span></pre></td></tr></table></figure><p>第三篇是分支结构<span class=\"spoiler\" title=\"你知道得太多了\"> x 年后更新</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/10/python/easy/pythone1/",
            "url": "https://www.kaitaku.xyz/2022/01/10/python/easy/pythone1/",
            "title": "python小白篇1-安装与配置",
            "date_published": "2022-01-10T11:26:33.000Z",
            "content_html": "<h1 id=\"步骤1安装python解释器\"><a class=\"anchor\" href=\"#步骤1安装python解释器\">#</a> 步骤 1. 安装 python 解释器</h1>\n<p>前往 python 官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy8=\"> 点我直达</span><br />\n选择 Download,All releases,3.10.1 <br />\n请使用 IDM 系多线程下载器<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">不使用也能在 3022 年前下载完</span><br />\n<img data-src=\"https://s2.loli.net/2022/01/10/NXaQOKqzLld9h4E.png\" alt=\"step1.png\" /><br />\n 在此界面中勾选 Add Python 3.10 to PATH <br />\n按下 Install Now 安装，完成后按 Close</p>\n<h1 id=\"步骤2安装pycharm\"><a class=\"anchor\" href=\"#步骤2安装pycharm\">#</a> 步骤 2. 安装 pycharm</h1>\n<p>前往 jetbrains 官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9weWNoYXJtLw==\"> 点我直达</span><br />\n<span class=\"spoiler\" title=\"你知道得太多了\">中文界面还看不懂？</span><br />\n<img data-src=\"https://s2.loli.net/2022/01/10/K5qrbPf9NOZLTyw.png\" alt=\"step2.png\" /><br />\n 选择社区版进行安装 <br />\n安装过程就不说了 (应该能看懂)</p>\n<h1 id=\"步骤3配置pycharm\"><a class=\"anchor\" href=\"#步骤3配置pycharm\">#</a> 步骤 3. 配置 pycharm</h1>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/gbm3Dn2CO8LjUEa.jpg\" alt=\"step3.jpg\" /><br />\n 单击设置 (位置相同，但应该是英文)<br />\n<img data-src=\"https://s2.loli.net/2022/01/10/PLgQeUV35nYWpsF.jpg\" alt=\"step4.jpg\" /><br />\n 选择左侧选项，搜索 Chi, 选择左侧插件安装，重启 Pycharm</p>\n<h1 id=\"步骤4创建新项目\"><a class=\"anchor\" href=\"#步骤4创建新项目\">#</a> 步骤 4. 创建新项目</h1>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/gwzUaXv4WdMY8mP.png\" alt=\"无标题.png\" /><br />\n<span class=\"spoiler\" title=\"你知道得太多了\"> 应该看图就能懂</span><br />\n<img data-src=\"https://s2.loli.net/2022/01/10/XGQxLtjckfCI3ao.png\" alt=\"无标题.png\" /><br />\n 创建新文件 (文件名不要使用 abc)</p>\n<p>正经的编程内容请见二篇</p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        }
    ]
}