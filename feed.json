{
    "version": "https://jsonfeed.org/version/1",
    "title": "Yume shoka",
    "subtitle": "kaitakuの博客",
    "icon": "https://www.kaitaku.xyz/images/favicon.ico",
    "description": "一个有一些python和mc文章的网站",
    "home_page_url": "https://www.kaitaku.xyz",
    "items": [
        {
            "id": "https://www.kaitaku.xyz/2022/02/12/hexo/hexo2/",
            "url": "https://www.kaitaku.xyz/2022/02/12/hexo/hexo2/",
            "title": "hexo教程2-配置与写作",
            "date_published": "2022-02-12T08:53:20.000Z",
            "content_html": "<h1 id=\"配置hexo\"><a class=\"anchor\" href=\"#配置hexo\">#</a> 配置 hexo</h1>\n<h2 id=\"hexo配置\"><a class=\"anchor\" href=\"#hexo配置\">#</a> hexo 配置</h2>\n<div class=\"note info\">\n<p>hexo 配置指根目录下 <code>_config.yml</code></p>\n</div>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#网站大标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#网站副标题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#网站描述</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#关键字，空格分割</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#作者名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN <span class=\"token comment\">#zh-CN 为简体中文</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Asia/Shanghai'</span> <span class=\"token comment\">#东八区时区</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.kaitaku.xyz <span class=\"token comment\">#你的网站链接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>year/<span class=\"token punctuation\">:</span>month/<span class=\"token punctuation\">:</span>day/<span class=\"token punctuation\">:</span>title/ <span class=\"token comment\">#文章格式</span></pre></td></tr></table></figure><p>根据上述注释填入即可</p>\n<h2 id=\"主题配置\"><a class=\"anchor\" href=\"#主题配置\">#</a> 主题配置</h2>\n<h3 id=\"资源配置\"><a class=\"anchor\" href=\"#资源配置\">#</a> 资源配置</h3>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Alternate site name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> Yume shoka <span class=\"token comment\"># 比大标题高一级的标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#//cdn.jsdelivr.net/gh/yourname/repo@latest/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span> css</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span> js</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">images</span><span class=\"token punctuation\">:</span> images</pre></td></tr></table></figure><p><code>statics</code>  项中的注释部分是 jsdelivrCDN 加速，如果你的项目已经部署在了 github 上且开源<br />\n就可以去掉不是注释的 /, 然后把 yourname 改成你的 github 用户名，repo 改成项目名来加速网站</p>\n<h3 id=\"导航栏配置\"><a class=\"anchor\" href=\"#导航栏配置\">#</a> 导航栏配置</h3>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> /about/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> user</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\"># 友链: /friends/ || heart</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\"># links: /links/ || magic</span></pre></td></tr></table></figure><p>格式为： <code>显示文字: 文件位置 || 图标</code> <br />\n下拉式菜单格式：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">显示文字</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">显示文字</span><span class=\"token punctuation\">:</span> 位置 <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> 图标</pre></td></tr></table></figure><div class=\"note info\">\n<p>这里的文件位置为以 <code>source</code>  为根目录，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pbmRleC1kcTFoejdiYTgwMGRnOWdpYTk4OW1jdXIydHZlYTIxMjhmMXQxZC5tZA==\"> 建立文件夹后内部文件名为 index.md</span></p>\n</div>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourname <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">#google: https://plus.google.com/yourname || google</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">#twitter: https://twitter.com/yourname || twitter || \"#00aff0\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">#zhihu: https://www.zhihu.com/people/yourname || zhihu || \"#1e88e5\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">#music: https://music.163.com/#/user/home?id=yourid || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">#weibo: https://weibo.com/yourname || weibo || \"#ea716e\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">#about: https://about.me/yourname || address-card || \"#3b5998\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">email</span><span class=\"token punctuation\">:</span> mailto<span class=\"token punctuation\">:</span>mail@mail.com <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> envelope <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#55acd5\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr></table></figure><p>把对应网址的 yourname 更改为你的用户名，不需要的注释即可</p>\n<h3 id=\"评论配置\"><a class=\"anchor\" href=\"#评论配置\">#</a> 评论配置</h3>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你的 appid</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> mp <span class=\"token comment\"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Article reading statistic</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">NoRecordIP</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Whether to record the commenter IP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">serverURLs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">powerMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">tagMeta</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> 新朋友</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> 主人</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> 小伙伴</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">tagColor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-orange)\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-aqua)\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\"># - hash of master1@email.com</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\"># - hash of master2@email.com</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\"># - hash of friend1@email.com</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token comment\"># - hash of friend2@email.com</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>本教程使用国际版进行示范，如果你的域名已经备案请使用中国版</p>\n</div>\n<p>进入 LeanCloud<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuYXBwLw==\"> 官网</span> 选择右上角的 console<br />\n 注册一个 LeanCloud 账号，然后创建一个项目：<br />\n<img data-src=\"https://pic.imgdb.cn/item/62087a6b2ab3f51d91467d39.jpg\" alt=\"\" /><br />\n随便起一个名字，然后创建后选择 <code>设置-&gt;应用凭证</code> ，如下图：<br />\n<img data-src=\"https://pic.imgdb.cn/item/62087af82ab3f51d9146f3a7.jpg\" alt=\"\" /><br />\n随后将 AppID 和 AppKey 填入对应项，serverURLs 填入下面 request 域名中的第一个<br />\n tagMember 中填入对应邮箱的 MD5 加密，前面一定要有小横线</p>\n<h1 id=\"创建文章\"><a class=\"anchor\" href=\"#创建文章\">#</a> 创建文章</h1>\n<h2 id=\"写作\"><a class=\"anchor\" href=\"#写作\">#</a> 写作</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx hexo new post 标题</pre></td></tr></table></figure><p>然后再 <code>_posts</code>  目录下就会出现一个 <code>标题.md</code> , 打开后长这样：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 标题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> 日期</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>这是 hexo 的文章头，使用 <code>---</code>  分隔正文，采取 yaml 格式<span class=\"spoiler\" title=\"你知道得太多了\">所以直接用 yaml 高亮的</span><br />\n <code>tags</code>  是这篇文章的标签，多个用空格分割<br />\n <code>categories</code>  是分类，可以添加在 tags 下面，格式如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> cate1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">-</span> cate2</pre></td></tr></table></figure><div class=\"note warning\">\n<p>这样 hexo 会认为 cate2 是 cate1 的子类，而非 cate1 和 cate2 是独立两个类</p>\n</div>\n<p>具体 markdown 语法可以自行百度，写完后见下文</p>\n<h2 id=\"生成\"><a class=\"anchor\" href=\"#生成\">#</a> 生成</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx hexo algolia <span class=\"token comment\"># 对文章进行索引 (配置了搜索组件)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npx hexo d -g <span class=\"token comment\"># 生成静态并部署</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npx hexo s <span class=\"token comment\"># 启动本地服务器</span></pre></td></tr></table></figure><p>这一步是进行测试，防止配置出现问题，如果无问题就可以部署了</p>\n<div class=\"note success\">\n<p>部署内容见三篇</p>\n</div>\n",
            "tags": [
                "hexo",
                "hexo"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/02/12/hexo/hexo1/",
            "url": "https://www.kaitaku.xyz/2022/02/12/hexo/hexo1/",
            "title": "hexo教程1-开发环境搭建",
            "date_published": "2022-02-12T07:52:59.000Z",
            "content_html": "<h1 id=\"开发环境搭建\"><a class=\"anchor\" href=\"#开发环境搭建\">#</a> 开发环境搭建</h1>\n<h2 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> node.js</h2>\n<p>进入 node.js<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\"> 官网</span>，下载 current 版 (如下图所示)<br />\n<img data-src=\"https://pic.imgdb.cn/item/62076c302ab3f51d91723eeb.jpg\" alt=\"\" /><br />\n 随后双击安装，然后在搜索打开 Node.js command prompt<br />\n 输入以下指令安装 cnpm：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cnpm -registry<span class=\"token operator\">=</span>https://registry.npm.taobao.org</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cnpm -v <span class=\"token comment\"># 验证安装是否成功</span></pre></td></tr></table></figure><p>然后安装 hexo：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cnpm <span class=\"token function\">install</span> -g hexo-cli</pre></td></tr></table></figure><h2 id=\"创建hexo文件夹\"><a class=\"anchor\" href=\"#创建hexo文件夹\">#</a> 创建 hexo 文件夹</h2>\n<p>创建一个新建文件夹，然后在文件夹内按 <span class=\"kbd\">Shift</span> + <span class=\"kbd red\">RMB</span> 打开 powershell, 输入：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx hexo init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 文件夹名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cnpm <span class=\"token function\">install</span></pre></td></tr></table></figure><p>文件夹结构应该是这样的：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_modules</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>scaffolds</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>source</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>themes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>- .gitattributes</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- .gitignore</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>- _config.landspace.yml</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>- _config.yml</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>- package.json</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>- package-lock.json</pre></td></tr></table></figure><p>打开 powershell, 执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx hexo g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cnpm <span class=\"token function\">install</span> hexo-server</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npx hexo s</pre></td></tr></table></figure><p>然后打开 <code>http://localhost:4000</code> , 如果出现的界面如下，就成功了<br />\n<img data-src=\"https://pic.imgdb.cn/item/620770cc2ab3f51d9177b809.jpg\" alt=\"\" /></p>\n<h2 id=\"主题安装\"><a class=\"anchor\" href=\"#主题安装\">#</a> 主题安装</h2>\n<p>hexo 有很多主题，本文使用 <code>shoka</code>  进行示范</p>\n<div class=\"note info\">\n<p>shoka 的很多功能和配置可以查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">官方文档</span></p>\n</div>\n<h3 id=\"下载主题\"><a class=\"anchor\" href=\"#下载主题\">#</a> 下载主题</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cd 你的博客文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p>然后安装依赖包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 卸载自带渲染器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cnpm un hexo-renderer-marked</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装对应的渲染器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cnpm i hexo-renderer-multi-markdown-it</pre></td></tr></table></figure><p>如果报错提示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ERROR: Failed to download Chromium r818455<span class=\"token operator\">!</span> Set <span class=\"token string\">\"PUPPETEER_SKIP_CHROMIUM_DOWNLOAD\"</span> <span class=\"token function\">env</span> variable to skip download.</pre></td></tr></table></figure><p>可以进行如下操作：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装无核心版</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cnpm i hexo-renderer-multi-markdown-it --ignore-scripts</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 卸载不完整的 puppeteer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cnpm un puppeteer</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 安装完整的 puppeteer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cnpm i puppeteer <span class=\"token comment\"># 这一步会安装最新版的 puppeteer, 比渲染器高 7 个大版本左右</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 会提示安装两个依赖</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cnpm i utf-8-validate</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cnpm i bufferutil</pre></td></tr></table></figure><p>这种方法可以解决 cnpm 安装也失败的情况，但由于 <code>puppeteer</code>  版本高很多，可能会不稳定</p>\n<p>安装剩下的依赖项：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cnpm i hexo-autoprefixer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cnpm i hexo-algoliasearch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cnpm i hexo-symbols-count-time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cnpm i hexo-feed</pre></td></tr></table></figure><h3 id=\"配置主题\"><a class=\"anchor\" href=\"#配置主题\">#</a> 配置主题</h3>\n<p>首先把 <code>_config.landspace.yml</code>  更名为 <code>_config.shoka.yml</code> <br />\n 然后打开目录下 <code>_config.yml</code> , 加入以下内容：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr></table></figure><p>然后加入 <code>minify</code>  配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 排除 hexo-feed 用到的模板文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr></table></figure><p>然后找到如下内容，按照注释修改：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">new_post_name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title.md <span class=\"token comment\"># File name of new posts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">default_layout</span><span class=\"token punctuation\">:</span> post</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">titlecase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">external_link</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Open external links in new tab</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> site <span class=\"token comment\"># Apply to the whole site</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">filename_case</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">render_drafts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">relative_link</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">future</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 更改为 false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">hljs</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 如果不是 false 就改成 false</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr></table></figure><p>再加上 autoprefixer 的配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr></table></figure><p>和 feed 的：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#站点关键词，用 “,” 分隔</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure><p>和搜索组件，这个需要自行获取 appid, 前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20v\">官网</span>，左侧选项卡 apikey 查看对应选项，填入：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your appId</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your apiKey</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your adminApiKey</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#\"shoka\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">-</span> title <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">-</span> path <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">-</span> categories <span class=\"token comment\">#推荐配置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">-</span> content<span class=\"token punctuation\">:</span>strip<span class=\"token punctuation\">:</span>truncate<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">-</span> gallery</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">-</span> photos</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">-</span> tags</pre></td></tr></table></figure><p>之后在部署前执行 <code>hexo algolia</code>  就 OK 了</p>\n<div class=\"note info\">\n<p>开发环境搭建未完全完成，见二篇</p>\n</div>\n",
            "tags": [
                "hexo",
                "hexo"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/02/03/hexo/quic/",
            "url": "https://www.kaitaku.xyz/2022/02/03/hexo/quic/",
            "title": "本站已全面支持QUIC和HTTP/3",
            "date_published": "2022-02-03T05:15:13.000Z",
            "content_html": "<div class=\"note info\">\n<p>目前 QUIC 连接并不稳定，大概率使用 <code>http/2</code>  进行连接 <br />\n本站部署的是 iQUIC,h3-29 草案<br />\n甲骨文云修好了，但套了层 CDN (cloudflare), 所以还是支持 quic 的</p>\n</div>\n<h1 id=\"quic与http3\"><a class=\"anchor\" href=\"#quic与http3\">#</a> QUIC 与 HTTP3</h1>\n<h2 id=\"什么是quic\"><a class=\"anchor\" href=\"#什么是quic\">#</a> 什么是 QUIC</h2>\n<p>QUIC 是 Quick UDP Internet Connections 的缩写，目前分为 iQUIC 和 gQUIC 两种<br />\n QUIC 类似于在内核层实现的 TCP + TLS + HTTP/2。但 QUIC 基于 UDP, 因此绕开了对 TCP 进行改造的大量成本<br />\n QUIC 相较于 TLS+HTTP2 有几点优势：</p>\n<ul>\n<li>首次握手 1-RTT</li>\n<li>改善了 TCP 的拥塞</li>\n<li>前向纠错，减少重传</li>\n<li>连接平滑迁移，网络状态的变更不会影响连接断线</li>\n</ul>\n<p>QUIC 与 HTTP/2+TLS 的示意图：<br />\n<img data-src=\"https://pic.imgdb.cn/item/61fb6eff2ab3f51d91ffcff5.gif\" alt=\"\" /></p>\n<h2 id=\"为什么部署quic\"><a class=\"anchor\" href=\"#为什么部署quic\">#</a> 为什么部署 QUIC</h2>\n<p>本网站已经部署了 HTTP/2+TLS1.3v, 理论上可以实现 0-RTT 握手<br />\n但由于 QUIC 对<strong>弱网环境</strong>的优化所以部署了 QUIC<span class=\"spoiler\" title=\"你知道得太多了\">4 次丢 1 次的离谱传输</span><br />\n还有一个次要原因就是速度快和我个人比较喜欢新的协议<span class=\"spoiler\" title=\"你知道得太多了\">闲的</span></p>\n<p>理由写的有<span class=\"spoiler\" title=\"你知道得太多了\">亿</span>点多，进入正题</p>\n<h2 id=\"quic部署\"><a class=\"anchor\" href=\"#quic部署\">#</a> QUIC 部署</h2>\n<div class=\"note info\">\n<p>本站为纯静态网站且近期才开始部署，所以使用方案较为激进</p>\n</div>\n<p>本站直接使用 <code>caddy</code>  进行 web 服务，并没有使用 nginx+caddy 的方案</p>\n<h3 id=\"安装caddy\"><a class=\"anchor\" href=\"#安装caddy\">#</a> 安装 caddy</h3>\n<div class=\"note info\">\n<p>caddy 仅支持 iQUIC 的最新草案，支持 gQUIC 请使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl0ZXNwZWVkdGVjaC5jb20v\">litespeed</span></p>\n</div>\n<p>本文针对于 ubuntu 系统，其他系统见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYWRkeXNlcnZlci5jb20vZG9jcy9pbnN0YWxs\"> caddy 官网</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y debian-keyring debian-archive-keyring apt-transport-https</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">curl</span> -1sLf <span class=\"token string\">'https://dl.cloudsmith.io/public/caddy/stable/gpg.key'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/trusted.gpg.d/caddy-stable.asc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">curl</span> -1sLf <span class=\"token string\">'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/caddy-stable.list</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> caddy</pre></td></tr></table></figure><p>执行上述命令即可安装 caddy</p>\n<h3 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/caddy/Caddyfile</pre></td></tr></table></figure><p>创建一个 <code>caddyfile</code>  然后写入以下内容：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    servers &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        protocol &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            experimental_http3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>然后在这段的<strong>下面</strong>写入：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>你的域名：443 &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    root * &#x2F; 你的网站根目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    encode zstd gzip # 开启 gzip 功能</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    tls mail@mail.com # 你的邮件，用于申请 ssl 证书</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    file_server</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>域名后的 <code>:443</code>  不带空格，空格是代码自动处理的错误<br />\n如果你自带证书，可以将 tls 后写成这样：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tls key pem # 先是 key 文件，然后 pem 证书</pre></td></tr></table></figure><p>再在域名这个块内插入以下内容：</p>\n<div class=\"note info\">\n<p>可以不插入试一下，如果可以就无须插入</p>\n</div>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>header &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    alt-svc h3&#x3D;&quot;:443&quot;, ma&#x3D;2592000</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>然后执行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> caddy run -config<span class=\"token operator\">=</span>/etc/caddy/Caddyfile <span class=\"token comment\"># 你的配置文件路径</span></pre></td></tr></table></figure><p>如果没有错误，就成功了</p>\n<h3 id=\"验证quic\"><a class=\"anchor\" href=\"#验证quic\">#</a> 验证 QUIC</h3>\n<p><strong>2022/2/6 更新</strong><br />\n今天打开网页，发现 HTTP/2 and SPDY indicator 插件变成了绿色：<br />\n<img data-src=\"https://pic.imgdb.cn/item/61ff81532ab3f51d919df58b.png\" alt=\"\" /> <br />\n打开开发者工具查看：<br />\n<img data-src=\"https://pic.imgdb.cn/item/61ff819d2ab3f51d919e4861.jpg\" alt=\"\" /><br />\n发现几乎全部为 <code>http/3</code>  协议，安全页也由 <code>TLS1.3</code>  变成了 <code>QUIC</code> <br />\n 后来发现是最开始没有打开 UDP443 端口导致 QUIC 握手一直失败，触发了浏览器的冷却期<br />\n直到今天才结束，使用了 QUIC 握手<br />\n ubuntu 放行 <code>443/udp</code>  端口：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">443</span>/udp</pre></td></tr></table></figure>",
            "tags": [
                "hexo",
                "hexo"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/29/python/easy/pythone9p/",
            "url": "https://www.kaitaku.xyz/2022/01/29/python/easy/pythone9p/",
            "title": "python小白篇9plus-第三方库",
            "date_published": "2022-01-29T11:49:46.000Z",
            "content_html": "<h1 id=\"安装第三方库\"><a class=\"anchor\" href=\"#安装第三方库\">#</a> 安装第三方库</h1>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>首先在 PowerShell 执行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip -V</pre></td></tr></table></figure><p>如果返回值类似这样：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip 21.2.4 from C:\\Users\\ 你的用户名 \\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pip (python 3.10)</pre></td></tr></table></figure><p>那证明 python 安装无误，如果出现 <code>无法将“pip”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确 ，然后再试一次。</code>  <br />\n请重新安装 python 或将 pip 添加到 path 中 <br />\n可以安装一个 numpy 试一下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> numpy</pre></td></tr></table></figure><p>出现 <code>Collecting numpy</code>  则代表安装已经开始<br />\n然后就会发现：这玩意的下载速度慢的离谱<span class=\"spoiler\" title=\"你知道得太多了\">堪比百度网盘</span><br />\n如何加速它是下一节的内容，先看一下安装完成后<span class=\"spoiler\" title=\"你知道得太多了\">可能需要 10 分钟左右</span></p>\n<div class=\"note info\">\n<p>出现 Successfully installed ... 就是安装完成</p>\n</div>\n<p>如果出现：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WARNING: You are using pip version 21.2.4; however, version 21.3.1 is available.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>You should consider upgrading via the &#39;C:\\Users\\zkz20\\AppData\\Local\\Programs\\Python\\Python310\\python.exe -m pip install --upgrade pip&#39; command.</pre></td></tr></table></figure><p>则代表你的 pip 版本较低，可以使用提示中的代码升级，但在 win10 部分版本只要命令中有 <code>python</code>  就会跳转到 Microsoft Store<br />\n 所以可以试一下另一种办法：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> --user -U pip</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 以下为说明</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># --user 代表使用用户级权限 (一般为标准管理员)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># -U 代表下载最新的版本 (不然会不更新)</span></pre></td></tr></table></figure><div class=\"note warning\">\n<p>如果你的系统输入 python 后不会跳转，请使用 <code>python -m pip install --upgrade pip</code> <br />\n 这种使用 pip 直接安装 pip 的方法仅为应急之举</p>\n</div>\n<h2 id=\"加速\"><a class=\"anchor\" href=\"#加速\">#</a> 加速</h2>\n<p>刚刚就发现了 pip 下载很慢，这是因为它会从国外的 Pypi 进行索引<br />\n然后从 github 进行下载，在国内会导致无法下载或速度近乎为零<br />\n但阿里提供了 pypi 和 &quot;轮子&quot; 的镜像源，可以使用它进行加速 <br />\n首先在资源管理器内进入 <code>C:\\用户(users)\\你的用户名\\pip</code> <br />\n 如果没有 pip 文件夹就新建一个，然后在文件夹内新建 <code>pip.ini</code>  (新建文本文档然后更改后缀名即可)<br />\n 然后写入以下内容：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">global</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">index-url</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">https://pypi.tuna.tsinghua.edu.cn/simple</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">install</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">trusted-host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">mirrors.aliyun.com</span></pre></td></tr></table></figure><p>随后保存，重启电脑，再进行安装，速度就上来了</p>\n<h1 id=\"requests库\"><a class=\"anchor\" href=\"#requests库\">#</a> requests 库</h1>\n<p>这个库就是爬虫常用的库了<span class=\"spoiler\" title=\"你知道得太多了\">本人也不常用，出了问题别找我</span><br />\n首先安装： <code>pip install requests</code> <br />\n 然后导入 requests 库</p>\n<h2 id=\"get方法\"><a class=\"anchor\" href=\"#get方法\">#</a> get 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.kaitaku.xyz\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>返回的应该是： <code>&lt;Response [200]&gt;</code> <span class=\"spoiler\" title=\"你知道得太多了\"> 不然你怎么看到的这篇文章</span><br />\n这里的 r 就是访问本站后返回的变量<br />\n输出一下页面上的文字：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.kaitaku.xyz\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>报错 <code>UnicodeEncodeError: 'gbk' codec can't encode character '\\xb4' in position 26166: illegal multibyte sequence</code>  <br />\n但我的网站是 utf-8<span class=\"spoiler\" title=\"你知道得太多了\"> 这个错误给我整不会了</span> <br />\n确认了一下： <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>  就是 utf-8<br />\n 随后发现是 python 中 print 的问题，更改默认编码为 <code>gb18030</code>  即可</p>\n<div class=\"note info\">\n<p>utf-8 可能导致乱码，所以使用 gb18030</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> io</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sys<span class=\"token punctuation\">.</span>stdout <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>TextIOWrapper<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'gb18030'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.kaitaku.xyz\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出结果中的一段： <code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=2&quot;&gt;</code> <br />\n 这就是网页上的 html 元素了，由于缺少 css 和 js 所以大概率无法正常显示<br />\n完整结果自行建一个 html 文件然后格式化代码即可<br />\n小任务：查看一下隔壁 <code>allin9-9.rth1.me</code>  的代码</p>\n<p>requests 库有一定风险，用的时候再查询详细文档，这里只是做了个简单介绍<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">终于要进入第 10 篇了</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/29/python/easy/pythone9/",
            "url": "https://www.kaitaku.xyz/2022/01/29/python/easy/pythone9/",
            "title": "python小白篇9-面向对象与异常捕获",
            "date_published": "2022-01-29T03:22:22.000Z",
            "content_html": "<h1 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h1>\n<h2 id=\"类方法和静态方法\"><a class=\"anchor\" href=\"#类方法和静态方法\">#</a> 类方法和静态方法</h2>\n<h3 id=\"类方法\"><a class=\"anchor\" href=\"#类方法\">#</a> 类方法</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    variety <span class=\"token operator\">=</span> <span class=\"token string\">\"柴犬\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">show_variety</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"这个类下所有对象都是</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls<span class=\"token punctuation\">.</span>variety<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">是一只狗\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>dog<span class=\"token punctuation\">.</span>show_variety<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>variety</code>  是类变量，通过这个类实例化的所有对象都有这个变量<br />\n在方法前加上 <code>@classmethod</code>  来声明这是一个类方法<br />\n类方法的首位参数应为 <code>cls</code> , 代表调用的对象的类 / 类</p>\n<div class=\"note info\">\n<p>首位参数可以是任何合法的形参名，但一般使用 <code>self</code>  和 <code>cls</code></p>\n</div>\n<h3 id=\"静态方法\"><a class=\"anchor\" href=\"#静态方法\">#</a> 静态方法</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一个静态方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">是一只狗\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>dog<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>静态方法没有特殊参数，所以和类外函数基本一致</p>\n<div class=\"note info\">\n<p>静态方法可以传入参数</p>\n</div>\n<h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">是一只狗\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Huskies</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>variety <span class=\"token operator\">=</span> <span class=\"token string\">\"哈士奇\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">正在吃\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">正在睡\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">是一只哈士奇\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在这个例子中， <code>Huskies</code>  是 <code>Dog</code>  的派生类 (子类), <code>Dog</code>  是 <code>Huskies</code>  的父类 (基类)<br />\n Huskies 类重写了实例化和输出方法，Huskies 类拥有所有 Dog 类的方法和变量<br />\n子类语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">name</span><span class=\"token punctuation\">(</span>父类<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr></table></figure><p>有时候会有这样的语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p><code>object</code>  是所有 python 类的基类，在 python2 时必须要写入，但 python3 不需要这样写</p>\n<h2 id=\"超类\"><a class=\"anchor\" href=\"#超类\">#</a> 超类</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    self<span class=\"token punctuation\">.</span>variety <span class=\"token operator\">=</span> <span class=\"token string\">\"哈士奇\"</span></pre></td></tr></table></figure><p>这是 Huskies 类的实例化方法，里面的 <code>super()</code>  就是超类<br />\n <code>super()</code>  在 Huskies 类内代表 Dog 类，也可以使用 <code>Dog.__init__()</code>  来代替超类</p>\n<h1 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<h2 id=\"抛出异常\"><a class=\"anchor\" href=\"#抛出异常\">#</a> 抛出异常</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1或0:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> u<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"一个错误\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输入 1 就会抛出 ValueError 错误，因为使用了 <code>raise</code>  关键字<br />\n语法： <code>raise 错误</code> <br />\n但这个代码还可以简化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1或0:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token keyword\">not</span> u</pre></td></tr></table></figure><p><code>assert</code>  关键字在后面的变量为非时会返回 <code>AssertionError</code> <br />\nassert 不可以选择返回错误</p>\n<h2 id=\"异常捕获\"><a class=\"anchor\" href=\"#异常捕获\">#</a> 异常捕获</h2>\n<h3 id=\"捕获语法\"><a class=\"anchor\" href=\"#捕获语法\">#</a> 捕获语法</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    u1 <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    u2 <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a <span class=\"token operator\">=</span> u1<span class=\"token operator\">/</span>u2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"触发了除零错误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"触发了数值错误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"触发了</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有错误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"有没有错我都输出\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>try</code>  关键字后的代码块会被<strong>尝试执行</strong>，如果触发错误便会寻找 <code>except</code>  子句 <br />\nexecpt 语法： <code>except 异常:</code> <br />\n 如果没有触发错误，就会寻找 <code>else</code>  子句，没有 else 子句就会继续执行<br />\n如果有 <code>finally</code>  子句，就会执行，无论是否触发错误<br />\n <code>execpt Exception as e</code>  就是在处理未知错误，这里的 e 就是错误的临时变量</p>\n<div class=\"note danger\">\n<p>如果在 try 代码块内触发异常，将会直接跳出代码块，处理后下面需要使用 try 内定义的变量<br />\n可能导致未定义错误</p>\n</div>\n<h3 id=\"捕获的特殊情况\"><a class=\"anchor\" href=\"#捕获的特殊情况\">#</a> 捕获的特殊情况</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">raise</span> Exception</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">raise</span> Exception</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">raise</span> Exception</pre></td></tr></table></figure><p>这是一段<span class=\"spoiler\" title=\"你知道得太多了\">离谱的</span>代码，如果执行，就会出现这样一串字：<br />\n <code>During handling of the above exception, another exception occurred:</code>  <br />\n这行字代表在处理 try 内错误时，except 或 finally 内有 <code>raise</code>  子句或抛出了其他错误</p>\n<div class=\"note warning\">\n<p>except 子句内有 raise 且被触发会导致错误无法正常处理，上面的代码也会抛出 <code>ZeroDivisionError: division by zero</code></p>\n</div>\n<h2 id=\"定义异常\"><a class=\"anchor\" href=\"#定义异常\">#</a> 定义异常</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p>这是一个最简单的异常类，但我们可以给它加上一个实例化函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>value</pre></td></tr></table></figure><p>现在就可以自定义异常输出了</p>\n<h1 id=\"练习题\"><a class=\"anchor\" href=\"#练习题\">#</a> 练习题</h1>\n<p>用 <code>whlie</code>  和 <code>try...except...</code>  子句来实现 for 循环遍历迭代和生成器的功能<br />\n输出 next 返回值即可</p>\n<div class=\"note info\">\n<p>超出迭代器序列是 StopIteration 错误</p>\n</div>\n<p>这是数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        temp <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><span class=\"spoiler\" title=\"你知道得太多了\">下一篇是 9plus, 关于第三方库</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/27/python/easy/pythone8/",
            "url": "https://www.kaitaku.xyz/2022/01/27/python/easy/pythone8/",
            "title": "python小白篇8-面向对象和生成器与迭代器",
            "date_published": "2022-01-27T11:54:36.000Z",
            "content_html": "<h1 id=\"面向对象基础\"><a class=\"anchor\" href=\"#面向对象基础\">#</a> 面向对象基础</h1>\n<h2 id=\"建立一个类\"><a class=\"anchor\" href=\"#建立一个类\">#</a> 建立一个类</h2>\n<h3 id=\"类的基本语法\"><a class=\"anchor\" href=\"#类的基本语法\">#</a> 类的基本语法</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是init方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这是一个最基本的类，有 <code>__init__方法</code></p>\n<div class=\"note info\">\n<p>类名必须使用<strong>大驼峰命名法</strong>，即所有的单词首字母大写</p>\n</div>\n<p>类的基本语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    函数</pre></td></tr></table></figure><h3 id=\"对象函数\"><a class=\"anchor\" href=\"#对象函数\">#</a> 对象函数</h3>\n<p>在 python 中，像 <code>__init__</code> 这样前后都有双下划线的叫<strong>魔法方法</strong><br />\n例如 <code>__init__</code> 就是在方法实例化时调用<br />\n一般来说，实例化方法用于建立变量，举个栗子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例化完成\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样实例就有了 value 变量，类内可以通过 <code>self.value调用</code> ，类外使用 <code>实例名.value</code>  访问 <br />\n定义一个非魔法对象方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> 函数名<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr></table></figure><p><code>self</code>  就是调用对象，可以使用 self 调用类内方法或变量</p>\n<div class=\"note info\">\n<p>类内直接写代码会直接执行，必须使用函数括起来</p>\n</div>\n<h2 id=\"实例化\"><a class=\"anchor\" href=\"#实例化\">#</a> 实例化</h2>\n<p>写个狗的类<span class=\"spoiler\" title=\"你知道得太多了\">只会吃和睡就离谱</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">正在吃\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">正在睡\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">是一只狗\"</span></span></pre></td></tr></table></figure><p>然后实例化 Dog 类</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>doge <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"doge\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>doge<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>doge<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>doge<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 输出:doge 正在吃</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># doge 正在睡</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># doge 是一只狗</span></pre></td></tr></table></figure><p>实例化语法 <code>变量 = 类名(参数)</code> <br />\n <code>doge.eat()</code>  就是调用了对象方法 <code>eat()</code> <br />\n 方法内使用了 <code>self.name</code>  作为名字<br />\n <code>print(doge)</code>  是调用了对象的 <code>__str__</code> 方法</p>\n<div class=\"note info\">\n<p>__str__必须<strong>返回</strong>一个<strong>字符串</strong></p>\n</div>\n<div class=\"note info\">\n<p>面向对象大部分会在第 9 篇讲，这一段就是基础中的基础</p>\n</div>\n<h1 id=\"迭代器和生成器\"><a class=\"anchor\" href=\"#迭代器和生成器\">#</a> 迭代器和生成器</h1>\n<h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iter1 <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 或 list1.__iter__()</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 或 next (iter1)</span></pre></td></tr></table></figure><p>对可迭代对象执行 <code>iter()</code>  操作，就可以得到一个迭代器<br />\n对迭代器执行 <code>next()</code>  方法，就会让指针前进一项并返回<br />\n在指针超出范围后，会返回 <code>StopIteration</code>  错误<br />\n<img data-src=\"https://s3.bmp.ovh/imgs/2022/01/a44611ae0b34b837.png\" alt=\"一个示意图\" /><br />\n迭代器非常省内存，比如一个有一千万个整数的列表，使用列表会占用 100MB 左右，而迭代器只有 50B 左右<br />\n因为迭代器是<strong>惰性</strong>的，执行前不会访问<br />\n可以使用 for 循环来快速访问迭代器：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"生成器\"><a class=\"anchor\" href=\"#生成器\">#</a> 生成器</h2>\n<h3 id=\"生成器函数\"><a class=\"anchor\" href=\"#生成器函数\">#</a> 生成器函数</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">yield</span> a</pre></td></tr></table></figure><p>这是一个生成斐波那契数列的函数，尝试直接 print 它：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fibonacci<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>返回： <code>&lt;generator object fibonacci at 0x0000022C97099B60&gt;</code> <br />\n 实际上这个函数已经变成了生成器，可以使用 for 或 next 来获取返回值<br />\n生成器的语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> 函数名<span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> 返回值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    语句</pre></td></tr></table></figure><p>与 return 不同，函数遇到 yield 后不会退出，在返回值后继续执行下面的代码<br />\n所以可以有多个 yield, 返回值格式如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>值 1 值 2 值 3 值 1 值 2 值 3...</pre></td></tr></table></figure>",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/21/python/easy/pythone7/",
            "url": "https://www.kaitaku.xyz/2022/01/21/python/easy/pythone7/",
            "title": "python小白篇7-递归与匿名函数",
            "date_published": "2022-01-21T03:56:59.000Z",
            "content_html": "<h1 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h1>\n<p>递归是什么？<br />\n 举个例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span><span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> count</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> count <span class=\"token operator\">+</span> demo<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 99</span></pre></td></tr></table></figure><p><span class=\"spoiler\" title=\"你知道得太多了\">约等于循环 99 次 + 1</span><br />\n 在函数中调用函数本身就是递归</p>\n<div class=\"note warning\">\n<p>递归必须要准备一个退出分支，例如本段的 <code>if n==100:</code>  就是退出分支</p>\n</div>\n<p>如果没有退出分支：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> count <span class=\"token operator\">+</span> demo<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># RecursionError: maximum recursion depth exceeded</span></pre></td></tr></table></figure><p>python 有最大递归深度，一般为<strong> 1000 层</strong>，部分解释器由于配置可能会有 ±10 层的区别<br />\n假如这个函数在正常情况的递归深度超过了 1000 层，可以使用下面的代码调整最大深度</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 层数</span></pre></td></tr></table></figure><p>然后你就会发现：代码执行不完就会报错 <code>进程已结束,退出代码-1073741571 (0xC00000FD)</code> <br />\n 这是因为栈溢出了，建议减少递归层数或进行<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMzY3NDZhZDg0NWQ=\">尾递归优化</span></p>\n<div class=\"note info\">\n<p>生成器在后面会讲到</p>\n</div>\n<h1 id=\"匿名表达式和函数变量\"><a class=\"anchor\" href=\"#匿名表达式和函数变量\">#</a> 匿名表达式和函数变量</h1>\n<h2 id=\"匿名表达式\"><a class=\"anchor\" href=\"#匿名表达式\">#</a> 匿名表达式</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> n <span class=\"token operator\">*</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>这种写法 PEP8 并不建议，它会建议使用 def 来实现效果，但部分情况下这样会徒增行数<br />\n并不会增加可读性</p>\n</div>\n<p>匿名表达式格式： <code>lambda 输入:输出</code> <br />\n建议将 lambda 用于简易函数，大型函数使用 def</p>\n<h2 id=\"警卫\"><a class=\"anchor\" href=\"#警卫\">#</a> 警卫</h2>\n<p>在 lambda 后可以使用 <code>if...else</code>  (警卫) 来实现分支结构<br />\n例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">:</span> a<span class=\"token operator\">*</span><span class=\"token number\">10</span> <span class=\"token keyword\">if</span> a<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> a<span class=\"token operator\">*</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>警卫的格式： <code>返回值 if 条件 else 返回值(可以再套一个if)</code> <br />\n 可用于 <code>return</code>  等返回值的关键字后</p>\n<div class=\"note info\">\n<p>套的层多了可读性很差</p>\n</div>\n<h2 id=\"函数变量\"><a class=\"anchor\" href=\"#函数变量\">#</a> 函数变量</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>func <span class=\"token operator\">=</span> demo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>变量名 = 方法</code> 即为函数变量格式</p>\n<div class=\"note warning\">\n<p>方法后不带括号，不然就是把返回值作为赋值对象</p>\n</div>\n<p>直接用 <code>变量名()</code>  就可以调用方法</p>\n<h2 id=\"推导式\"><a class=\"anchor\" href=\"#推导式\">#</a> 推导式</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></pre></td></tr></table></figure><p>推导式格式： <code>表达式 for 变量 in 可迭代数据</code> <br />\n警卫同样适用于表达式，如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token keyword\">if</span> x<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><span class=\"spoiler\" title=\"你知道得太多了\">下一篇讲迭代与生成器、面向对象概念</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/18/python/easy/pythone6/",
            "url": "https://www.kaitaku.xyz/2022/01/18/python/easy/pythone6/",
            "title": "python小白篇6-函数与作用域",
            "date_published": "2022-01-18T03:54:44.000Z",
            "content_html": "<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"定义函数\"><a class=\"anchor\" href=\"#定义函数\">#</a> 定义函数</h2>\n<p>一个任务：把每个值乘 2 次方并除以 5 再加一<br />\n你可以这样做:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> a<span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但假如你要在不同的地方做 x 次操作呢？<br />\n 就可以用到函数了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> num <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">=</span> demo<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以下是函数的语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> 函数名<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码</pre></td></tr></table></figure><p><code>return</code>  后面是函数的返回值，需要使用变量 &quot;接住&quot;<br />\n 在遇到 <code>return</code>  关键字之后，函数会自动<strong>退出</strong></p>\n<div class=\"note info\">\n<p>return 不是必须的，没有 return 则会在函数执行完后退出</p>\n</div>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<div class=\"note info\">\n<p>参数分为形参和实参，定义时的叫形参，填入的是实参</p>\n</div>\n<h3 id=\"标准参数和类型标注\"><a class=\"anchor\" href=\"#标准参数和类型标注\">#</a> 标准参数和类型标注</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span><span class=\"token operator\">|</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> num<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p><code>num</code>  是标准参数，不填会报错： <code>TypeError: demo() missing 1 required positional argument: 'num'</code> <br />\n <code>:int|float</code>  是类型标注，表示只能填入 <code>int</code>  和 <code>float</code>  类型， <code>|</code>  表示<strong>和</strong><br />\n <code> -&gt; float</code>  表示返回值是 <code>float</code>  类型，方便 IDE 分析</p>\n<div class=\"note info\">\n<p>类型标注和返回值标注不是必须的，但建议使用</p>\n</div>\n<h3 id=\"缺省形参和特殊参数\"><a class=\"anchor\" href=\"#缺省形参和特殊参数\">#</a> 缺省形参和特殊参数</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> num <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">=</span> demo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>num: int | float = 10</code>  中的 <code>= 10</code>  表示缺省<br />\n如果没有填入参数就使用 10 作为参数输入</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>demo<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个函数会将传入的所有元素输出<br />\n <code>*args</code>  表示不知道会输入多少个元素，把所有参数做成元组处理</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>demo<span class=\"token punctuation\">(</span>k1<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>k2<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>**kwargs</code>  代表把传入的参数作为字典处理，因此传入必须使用 <code>键=值</code> 这种方法</p>\n<div class=\"note info\">\n<p>看不懂 <code>**kwargs.items()</code>  是什么意思就去复习一下字典</p>\n</div>\n<h2 id=\"函数名\"><a class=\"anchor\" href=\"#函数名\">#</a> 函数名</h2>\n<p>函数名和变量的命名规则很像，但可以使用<strong>小驼峰命名法</strong>：</p>\n<blockquote>\n<p>例:numOutput<br />\n 首字母小写，剩下的单词开头大写</p>\n</blockquote>\n<h1 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h1>\n<p>python 的作用域分为以下几种： <br />\nLocal 局部作用域，简写为 L <br />\nEnclosing 闭包作用域，简写为 E <br />\nGlobal 全局作用域，简写为 G <br />\nBuilt-in 内置作用域，简写为 B <br />\n变量和函数的搜寻的顺序：L-&gt;E-&gt;G-&gt;B</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gvar <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 全局作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    evar <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 对于 demo2 的闭包作用域，对于 demo 的局部作用域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">demo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        lvar <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">#局部作用域</span></pre></td></tr></table></figure><p>在作用域外不能调用作用域内的变量与函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gvar <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 全局作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    evar <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 对于 demo2 的闭包作用域，对于 demo 的局部作用域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">demo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        lvar <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">#局部作用域</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>demo2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># NameError: name 'demo2' is not defined. Did you mean: 'demo'?</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>把 demo2 套在 demo 里就叫闭包函数</p>\n</div>\n<p>加入作用域内有同名变量或更改变量值，需要使用 <code>global</code>  和 <code>nonlocal</code>  声明变量<br />\n语法： <code>nonlocal/global 变量</code></p>\n<div class=\"note info\">\n<p>global 是全局变量，nonlocal 是闭包变量</p>\n</div>\n<p><span class=\"spoiler\" title=\"你知道得太多了\">下一篇讲递归和匿名表达式</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/15/python/easy/pythone5p/",
            "url": "https://www.kaitaku.xyz/2022/01/15/python/easy/pythone5p/",
            "title": "python小白篇5plus-常用模块",
            "date_published": "2022-01-15T12:57:43.000Z",
            "content_html": "<h1 id=\"random-随机数库\"><a class=\"anchor\" href=\"#random-随机数库\">#</a> random - 随机数库</h1>\n<h2 id=\"random方法\"><a class=\"anchor\" href=\"#random方法\">#</a> random 方法</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>import random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a &#x3D; random.random()</pre></td></tr></table></figure><p><code>random()</code>  方法可以生成一个大于 0 小于 1 的浮点随机数<span class=\"spoiler\" title=\"你知道得太多了\">位数可能很长</span><br />\n通常使用 <code>round()</code>  方法来控制浮点数长度</p>\n<div class=\"note info\">\n<p><code>round(n,ndigits=x)</code>  为其调用方法，n 为数据，ndigits 为位数 <br />\n <code>round()</code>  方法遵循四舍五入原则<span class=\"spoiler\" title=\"你知道得太多了\">好用多了</span></p>\n</div>\n<div class=\"note info\">\n<p>python 使用模块前，需要先使用 <code>import</code>  关键字声明</p>\n</div>\n<h2 id=\"randint方法\"><a class=\"anchor\" href=\"#randint方法\">#</a> randint 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0-10 随机数</span></pre></td></tr></table></figure><p><code>randint(s,e)</code>  方法可以生成一个 s-e 区间内的随机整数</p>\n<div class=\"note warning\">\n<p><code>randint()</code>  含头含尾，会生成头数和尾数</p>\n</div>\n<div class=\"note info\">\n<p>由于 bool 类型是 int 的子类，所以 <code>randint(0,1)</code>  相当于 50% 概率为真，可以直接用在条件中，不需要 <code>==</code></p>\n</div>\n<h2 id=\"uniform方法\"><a class=\"anchor\" href=\"#uniform方法\">#</a> uniform 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0-10 随机浮点数</span></pre></td></tr></table></figure><p><code>uniform()</code>  相当于一个带参数的 <code>random()</code>  方法</p>\n<div class=\"note info\">\n<p><code>uniform()</code>  的位数更<span class=\"spoiler\" title=\"你知道得太多了\">离谱</span>长，务必使用 <code>round()</code>  进行处理</p>\n</div>\n<h2 id=\"randrange方法\"><a class=\"anchor\" href=\"#randrange方法\">#</a> randrange 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0-10 的随机偶数</span></pre></td></tr></table></figure><p><code>randrange()</code>  方法生成随机递增序列里的一个数，这个数一定是 <code>起始位+步长的倍数</code> <br />\n看不懂？让我们等量代换一下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 随机从列表里选择一个数据，后面会讲到</span></pre></td></tr></table></figure><p>这段代码与上面的结果是一致的，它的流程就是：</p>\n<ol>\n<li>生成一个符合输入参数的列表</li>\n<li>从列表里随机选择一个数</li>\n<li>返回这个数</li>\n</ol>\n<p>这里还有一个拆分更彻底的版本：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 根据输入参数生成列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 随机选择元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>index <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回 (输出) 此元素</span></pre></td></tr></table></figure><h2 id=\"shuffle和sample方法\"><a class=\"anchor\" href=\"#shuffle和sample方法\">#</a> shuffle 和 sample 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>r <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>shuffle(seq)</code>  和 <code>sample(seq,k=len(seq))</code>  都可以随机打乱列表<br />\n但 shuffle 是在原列表上做操作，而 sample 则是返回一个新列表<br />\n <code>sample(seq,k=n&lt;len(seq)</code>  则可以从列表中随机提取长度为 n 的片段 (不连续)</p>\n<h2 id=\"choice和choices方法\"><a class=\"anchor\" href=\"#choice和choices方法\">#</a> choice 和 choices 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>r1 <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>choice(seq)</code>  方法可以从列表中返回一个随机元素<br />\n <code>choices(seq,k=n)</code>  方法可以从列表中返回 k 个随机元素</p>\n<h1 id=\"string-字符串模块\"><a class=\"anchor\" href=\"#string-字符串模块\">#</a> string - 字符串模块</h1>\n<p><code>string.ascii_letters</code>  从字母 a-Z 的字符串<br />\n <code>string.ascii_lowercase</code>  从字母 a-z 的字符串<br />\n <code>string.ascii_uppercase</code>  从字母 A-Z 的字符串<br />\n <code>string.digits</code>  所有十进制常数<br />\n <code>string.punctuation</code>  所有在 ASCII 环境下被 C 认为标点的字符串</p>\n<h1 id=\"time-时间模块\"><a class=\"anchor\" href=\"#time-时间模块\">#</a> time - 时间模块</h1>\n<div class=\"note info\">\n<p>仅包含及其常用的方法，并不完整</p>\n</div>\n<h2 id=\"struct_time格式\"><a class=\"anchor\" href=\"#struct_time格式\">#</a> struct_time 格式</h2>\n<p><code>struct_time</code>  是 time 模块返回的常见序列，索引见下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">索引</th>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">tm_year (年)</td>\n<td style=\"text-align:center\">比如 2022</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">tm_mon (月)</td>\n<td style=\"text-align:center\">1-12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">tm_mday (日)</td>\n<td style=\"text-align:center\">1-31</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">tm_hour (时)</td>\n<td style=\"text-align:center\">0-23 (转换请 + 1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">tm_min (分)</td>\n<td style=\"text-align:center\">0-59 (同上)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">tm_sec (秒)</td>\n<td style=\"text-align:center\">0-61</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">tm_wday (周几)</td>\n<td style=\"text-align:center\">0-6 (0 表周日，需要 + 1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">tm_yday (一年中的第几天)</td>\n<td style=\"text-align:center\">1-366</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">tm_isdst (是否是夏令时)</td>\n<td style=\"text-align:center\">默认为 - 1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"localtime和gmtime方法\"><a class=\"anchor\" href=\"#localtime和gmtime方法\">#</a> localtime 和 gmtime 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回一个 struct_time 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>utc <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>gmtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回一个 struct_time 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>utc<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这两个方法都会将输入的时间戳转换为 <code>struct_time对象</code> ，不输入则使用现在的时间戳<br />\n区别：localtime 使用你所在的时区，gmtime 使用 UTC 标准时间 (+0.00)<br />\n 附带一个 <code>mktime</code>  方法，它可以将 <code>struct_time对象</code> 转换回时间戳</p>\n<h2 id=\"time和time_ns方法\"><a class=\"anchor\" href=\"#time和time_ns方法\">#</a> time 和 time_ns 方法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>time()</code>  返回现在的时间戳<br />\n <code>time_ns()</code>  也是返回现在的时间戳，但是是 int 对象，不可以传入 <code>localtime</code>  作为参数</p>\n<div class=\"note info\">\n<p>time 模块比较复杂，建议查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L3RpbWUuaHRtbA==\">官方文档</span></p>\n</div>\n<h1 id=\"练习题\"><a class=\"anchor\" href=\"#练习题\">#</a> 练习题</h1>\n<p>1. 输入一个时间戳，返回它的年、月、日、时、分、秒 (当前时区),<br />\n 不输入则使用现在的时间戳，样例输出 / 入如下： <br />\n[输入]<em> 没有输入任何东西</em>  <br />\n[输出] 2022 年 1 月 16 日 16 时 7 分 30 秒 (此时时间)</p>\n<div class=\"note info\">\n<p>思考完再看代码样例</p>\n</div>\n<p>. <br />\n. <br />\n. <br />\n.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入时间戳:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    u <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">年</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">月</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">日</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">时</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">分</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">秒\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>2. 输入一串数据，判断它转换为 int 类型是否会报错，<br />\n可以则输出<strong>可以转换为 int 类型</strong>并返回这个数<br />\n不可以则输出<strong>不可以转换为 int 类型</strong>并返回这个字符串可以转换的部分<br />\n样例输入 / 出：<br />\n第一组数据： <br />\n[输入] 123456<br />\n [输出] 可以转换为 int 类型<br />\n [输出] 123456<br />\n 第二组数据： <br />\n[输入] a123b456<br />\n [输出] 不可以转换为 int 类型<br />\n [输出] 123456<br />\n. <br />\n. <br />\n. <br />\n. <br />\n.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入数据:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>can_int <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> u<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        t <span class=\"token operator\">+=</span> i</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        can_int <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> can_int<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"可以转换为int类型\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不可以转换为int类型\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/14/python/easy/pythone5/",
            "url": "https://www.kaitaku.xyz/2022/01/14/python/easy/pythone5/",
            "title": "python小白篇5-容器数据类型与常用方法",
            "date_published": "2022-01-14T07:06:58.000Z",
            "content_html": "<h1 id=\"容器类型\"><a class=\"anchor\" href=\"#容器类型\">#</a> 容器类型</h1>\n<h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>python 中的 list 可以存储相同 (list1) 或不同的数据 (list2)<br />\n 列表结构类似于 C++ 的数组，但区别是 python 列表存放的是指针</p>\n<div class=\"note info\">\n<p>如果你认真看了第 4 篇，那你应该知道 python 中的变量大部分都是指针</p>\n</div>\n<p>这里有一段代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list2 <span class=\"token operator\">=</span> list1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 会输出什么？</span></pre></td></tr></table></figure><p>答案是 <code>[1, 2, 3, 4, 5]</code> , 这里就是 python 的一个坑了，list2 在目标改变后并不会改变指针 (或者说 list1 这个目标没有改变)<br />\n 所以 list1 会与 list2 同步 <br />\n解决方法就是使用下面的方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list2 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 在目标列表后加一个 [::]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>切片同样适用于列表，[::] 表示返回所有内容</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>list1 就是一个 <code>二维列表</code> ，访问第一个列表的第二个数据需要使用下列方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"切片补充\"><a class=\"anchor\" href=\"#切片补充\">#</a> 切片补充</h2>\n<p>切片可以使用 <code>list[索引]</code>  来返回特定位置的数据<br />\n同样可以使用切片来更改数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [7, 2, 3, 4]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 更改多个数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [7, 8, 3, 4]</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>更改多个数据等号后必须为<strong>可迭代数据</strong><br />\n python 的切片<strong>含头不含尾</strong></p>\n</div>\n<h2 id=\"成员判断符\"><a class=\"anchor\" href=\"#成员判断符\">#</a> 成员判断符</h2>\n<p>在 python 中可以使用 <code>in</code>  来判断元素是否位于目标容器中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token keyword\">in</span> list1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 输出 yes</span></pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tuple2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>python 中的元组 (tuple) 与 list 基本一致，但元组内的数据不可变<br />\n列表基本操作<strong>增删改查</strong>元组只支持<strong>查</strong>，举个栗子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>tuple1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 在第 2 行会报错：TypeError: 'tuple' object does not support item assignment</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>增删改查的方法会在后面的部分讲到</p>\n</div>\n<h2 id=\"字典\"><a class=\"anchor\" href=\"#字典\">#</a> 字典</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict1<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>字典是一种<strong>哈希结构</strong>，查询效率非常高 (接近 O (1))<br />\n 字典通过键值对来储存对象，像 dict1 中， <code>&quot;a&quot;</code>  对应 <code>1</code> <br />\n 列表和元组都可以转换为字典<br />\n列表转为字典：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'a': 1, 'b': 2&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>二维嵌套列表的 0 位为键，1 位为值</p>\n</div>\n<p>对字典添加或赋值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dict1<span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 左侧为键，右侧为值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;'orange', 'banana', 'apple'&#125;</span></pre></td></tr></table></figure><p>集合是无序、无索引的，不可以执行<strong>改</strong>这个操作</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>集合会自动对数字进行排序，去除重复项</p>\n</div>\n<h1 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h1>\n<h2 id=\"通用方法\"><a class=\"anchor\" href=\"#通用方法\">#</a> 通用方法</h2>\n<p><code>print() input()</code>  控制台的输出 / 入 <br />\n <code>len()</code>  返回参数的长度 (仅可用于可迭代对象) <br />\n <code>max() min()</code>  返回参数的最大 / 小值 <br />\n <code>str() int()...(对应的类型名称)</code>  把对象转换为对应类型 <br />\n <code>type()</code>  返回对象类型 <br />\n <code>del obj</code>  删除对象 (全局命令)</p>\n<h2 id=\"容器类型方法\"><a class=\"anchor\" href=\"#容器类型方法\">#</a> 容器类型方法</h2>\n<h3 id=\"列表元组\"><a class=\"anchor\" href=\"#列表元组\">#</a> 列表，元组</h3>\n<div class=\"note info\">\n<p>元组仅适用于<strong>查询</strong></p>\n</div>\n<h4 id=\"增加\"><a class=\"anchor\" href=\"#增加\">#</a> 增加</h4>\n<p><code>append()</code>  在末尾添加一个元素，能且只能添加一个元素 <br />\n <code>extend()</code>  在末尾添加多个元素，必须以可迭代形式填入 <br />\n <code>insert()</code>  在指定位置添加一个元素，可迭代元素会以嵌套的形式填入</p>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<p><code>remove()</code>  删除列表中的指定<strong>值</strong>，不存在会返回错误 <br />\n <code>pop()</code>  删除列表中的指定<strong>索引</strong> (不指定删除 - 1 位元素), 并<strong>返回</strong>这个元素 <br />\n <code>del 对象[索引]</code>  删除指定索引的元素，索引超出列表会报错 <br />\n <code>clear()</code>  情空整个列表</p>\n<h4 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h4>\n<p><code>对象[索引] = 变量</code> 修改指定索引的元素 <br />\n <code>sort()</code>  对列表进行排序</p>\n<div class=\"note info\">\n<p>python 使用 <code>TimSort</code>  进行排序</p>\n</div>\n<h4 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h4>\n<p><code>index()</code>  返回查询值的索引，不存在会报错<br />\n <code>count()</code>  统计固定值的出现次数</p>\n<h3 id=\"字典-2\"><a class=\"anchor\" href=\"#字典-2\">#</a> 字典</h3>\n<h4 id=\"增加修改\"><a class=\"anchor\" href=\"#增加修改\">#</a> 增加，修改</h4>\n<p><code>dict[键]=值</code> 对指定对象赋值 (不存在创建新键值对) <br />\n <code>update()</code>  使用键值对更新字典</p>\n<div class=\"note info\">\n<p>字典和列表的复制一样，需要使用 <code>copy</code>  进行复制</p>\n</div>\n<h4 id=\"删除-2\"><a class=\"anchor\" href=\"#删除-2\">#</a> 删除</h4>\n<p><code>pop()</code>  删除指定键的键值对 <br />\n <code>popitem()</code>  删除最后添加的项目 (3.7 之前会删除随机项目) <br />\n <code>del dict[键]</code>  删除指定键的键值对<br />\n <code>clear()</code>  清除这个字典</p>\n<h4 id=\"查询-2\"><a class=\"anchor\" href=\"#查询-2\">#</a> 查询</h4>\n<p><code>get()</code>  获取指定键的值<br />\n <code>values() keys()</code>  获取所有的键 / 值<br />\n <code>items()</code>  返回所有键值对</p>\n<h3 id=\"集合-2\"><a class=\"anchor\" href=\"#集合-2\">#</a> 集合</h3>\n<h4 id=\"增加-2\"><a class=\"anchor\" href=\"#增加-2\">#</a> 增加</h4>\n<p><code>add()</code>  添加一个元素 <br />\n <code>update()</code>  添加多个元素 (可迭代)</p>\n<h4 id=\"删除-3\"><a class=\"anchor\" href=\"#删除-3\">#</a> 删除</h4>\n<p><code>remove()</code>  删除列表中的指定<strong>值</strong>，不存在会返回错误 <br />\n <code>discard()</code>  删除列表中的指定<strong>值</strong>，不会返回错误<br />\n <code>pop()</code>  删除并返回随机元素<br />\n <code>clear()</code>  清除这个集合</p>\n<div class=\"note info\">\n<p>集合只能遍历，无法查询和使用索引</p>\n</div>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/13/mcipv6/",
            "url": "https://www.kaitaku.xyz/2022/01/13/mcipv6/",
            "title": "MC-IPV6联机",
            "date_published": "2022-01-13T12:39:43.000Z",
            "content_html": "<h1 id=\"开始前的准备\"><a class=\"anchor\" href=\"#开始前的准备\">#</a> 开始前的准备</h1>\n<h2 id=\"游戏本体\"><a class=\"anchor\" href=\"#游戏本体\">#</a> 游戏本体</h2>\n<p>首先，双方需要使用一样的游戏版本和 ModLoader<br />\n 推荐直接将游戏打包后发给对方</p>\n<div class=\"note info\">\n<p>玩原版也需要安装 Forge/Fabric (后续步骤需要使用)</p>\n</div>\n<p>如果需要安装模组，需要查看模组安装需求 (建议在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24v\"> MCMOD 百科</span>查看)<br />\n 分为以下几种情况：</p>\n<ol>\n<li>客户端需装，服务端需装</li>\n<li>客户端选装，服务端需装</li>\n<li>客户端需装，服务端选装</li>\n<li>客户端需装，服务端无效</li>\n<li>客户端无效，服务端需装</li>\n</ol>\n<p>1.2.3 情况建议双方都安装此模组</p>\n<div class=\"note info\">\n<p>2. 情况主机端必装，其他人不装可能有影响<br />\n 3. 情况所有人最好都装</p>\n</div>\n<p>4.5 情况无效端不需要装</p>\n<div class=\"note primary\">\n<p>那么，什么是服务端和客户端？<br />\n假设 S 为存档拥有者，C 为加入的玩家 <br />\n即 S 为服务端 + 客户端，C 为客户端</p>\n</div>\n<h2 id=\"游戏模组\"><a class=\"anchor\" href=\"#游戏模组\">#</a> 游戏模组</h2>\n<p>版本截至 2022-1-13 时 <br />\n安装对应版本的模组 (服务端，客户端均需)：</p>\n<ul>\n<li>1.15.2-1.18.1(forge/fabric)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24vY2xhc3MvNDQ5OC5odG1s\">MCMOD 百科</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2RyaW50aC5jb20vbW9kL21jd2lmaXBucA==\">modrinth</span></li>\n<li>1.12.2-1.17.1(forge)/1.14.4-1.17.1(fabric)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24vY2xhc3MvMjc1NC5odG1s\">MCMOD 百科</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3Vyc2Vmb3JnZS5jb20vbWluZWNyYWZ0L21jLW1vZHMvbGFuLXNlcnZlci1wcm9wZXJ0aWVz\">CurseForge</span></li>\n<li>1.7.2-1.12.2(forge)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWNtb2QuY24vY2xhc3MvMTE1OC5odG1s\">MCMOD 百科</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9taW5lY3JhZnQuY3Vyc2Vmb3JnZS5jb20vcHJvamVjdHMvc2VydmVyLXByb3BlcnRpZXMtZm9yLWxhbg==\">CurseForge</span>,</li>\n</ul>\n<p>如果你是离线登录，需要将 <code>OnlineMode</code>  更改为 <code>false</code> , 具体配置文件更改请参阅 MCMOD 百科<br />\n建议安装第一个模组，有 GUI 页面</p>\n<h2 id=\"ipv6\"><a class=\"anchor\" href=\"#ipv6\">#</a> IPV6</h2>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3RpcHY2LmNuLw==\">ipv6test</span> 来检测双方的 IPV6<br />\n 如果一切正常，你看到的页面应该类似于这样：<br />\n<img data-src=\"https://s2.loli.net/2022/01/13/BTxRUH26vQDN7yC.png\" alt=\"b.png\" /><br />\n 底部应该是 10/10, 作者的 DNSv6 不太正常<br />\n然后检查 IPV6 的 IP, 以下有几个 IP 开头的意义：</p>\n<ul>\n<li>fe80 开头的无法用于上网，作用就是有个 IP</li>\n<li>2001 开头为 teredo, 不建议用于联机</li>\n<li>240e、2409、2408 为国内三大运营商的 IPV6, 非常正常</li>\n<li>其他开头请见下一步</li>\n</ul>\n<p>如果属于 fe80 或 2001 开头建议使用 <code>内网穿透</code> 而非 IPV6<br />\n<span class=\"spoiler\" title=\"你知道得太多了\"> 内网穿透短期不考虑出教程</span></p>\n<p>确定 IP 后使用 <code>ping</code>  指令 ping 一下对方，格式：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ping 对方 IP</pre></td></tr></table></figure><p>如果有链接超时或多数大于 250ms 就不建议使用此方法了<br />\n如果可以链接成功，就可以进入下一步了</p>\n<h1 id=\"加入世界\"><a class=\"anchor\" href=\"#加入世界\">#</a> 加入世界</h1>\n<p>这一步非常的简单：<br />\n服务端：单人游戏，进入存档后点击对局域网开放，记录下端口号<br />\n客户端：启动游戏后，点击多人游戏，直接连接，使用以下格式连接：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[ipv6 地址]: 端口号</pre></td></tr></table></figure><p>然后应该就可以快乐的联机了，出现错误请评论或自行百度解决</p>\n",
            "tags": [
                "MC",
                "MC"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/13/python/easy/pythone4/",
            "url": "https://www.kaitaku.xyz/2022/01/13/python/easy/pythone4/",
            "title": "python小白篇4-循环与基础类型",
            "date_published": "2022-01-13T02:46:48.000Z",
            "content_html": "<h1 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h1>\n<h2 id=\"while循环\"><a class=\"anchor\" href=\"#while循环\">#</a> while 循环</h2>\n<p>假设有这样一道题：输出 1-10 的所有数字。 <br />\n你会怎么做，像这样吗：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这时就要使用 python 中的 while 循环<br />\n语法如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> 条件<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 条件为真继续循环，为假跳出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr></table></figure><p>使用 while 循环优化后：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>循环中创建的变量在循环外访问，可能导致变量未定义</p>\n</div>\n<h2 id=\"跳出和跳过\"><a class=\"anchor\" href=\"#跳出和跳过\">#</a> 跳出和跳过</h2>\n<p>还是这样一道题：输出 1-10 的数字，不输出 5<br />\n 你可以做多个循环，像这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但 python 中提供了循环控制符: <code>break</code>  和 <code>continue</code>  <br />\nbreak 可以跳出循环，continue 可以跳过循环 \\</p>\n<div class=\"note info\">\n<p><code>break</code>  至多跳出一层循环，多次需要多个 break</p>\n</div>\n<p>现在用 continue 来优化一下代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>在部分情况下 <code>if...continue</code>  的性能可能不如两个循环 (微乎其微的影响)</p>\n</div>\n<h2 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h2>\n<p>还是这道题</p>\n<blockquote>\n<p>输出 1-10 的所有数字。</p>\n</blockquote>\n<p>这回使用 <code>for</code>  循环解决</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>for 循环的语法如下：<br />\n <code>for 变量 in 序列(可迭代的):</code>  <br />\n <code>range(头,尾)</code>  方法可以生成一个从头到尾 - 1 的数字序列</p>\n<div class=\"note info\">\n<p>range () 方法含头不含尾，需要调整参数</p>\n</div>\n<p>当然， <code>break</code>  和 <code>continue</code>  也适用与 for 循环<br />\n但 for 循环主要用于以下场景中：</p>\n<blockquote>\n<p>遍历一个长度为 x 的可迭代数据；<br />\n生成一个符合条件的序列；</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5 6 7 8 9</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>print 的 end 参数指定结尾输出什么，默认为 '\\n'(换行符)</p>\n</div>\n<p>容器类型的数据将会在 5 篇讲<span class=\"spoiler\" title=\"你知道得太多了\">又一个坑</span></p>\n<div class=\"note primary\">\n<p>for 循环不如 while 循环灵活，尽量多使用 while 循环</p>\n</div>\n<div class=\"note warning\">\n<p>else 并非分支结构专用，在循环后使用 else 代表正常退出循环后执行代码 <br />\n正常退出循环：不使用 <code>break</code>  或报错退出</p>\n</div>\n<h1 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h1>\n<h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2>\n<p>python 解释器使用指针来复用对象，节省内存，如下面所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>b <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 假设 10 的内存地址为 0x10f 假设 5 为 0x10d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0x10f 0x10f</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 实际只占用了一个内存地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># b 的指针会被切换为 0x10d, 老指针会被自动回收</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0x10f 0x10d</span></pre></td></tr></table></figure><h2 id=\"int型\"><a class=\"anchor\" href=\"#int型\">#</a> int 型</h2>\n<p>python 中的 int 不分长短型，不可迭代 (不可被 for 遍历)</p>\n<div class=\"note info\">\n<p>从 float 到 int 是向下取整，1.99-&gt;1</p>\n</div>\n<h2 id=\"float型\"><a class=\"anchor\" href=\"#float型\">#</a> float 型</h2>\n<p>python 中的 float 约等于 C 中的 long double, 无位数限制，不可迭代</p>\n<div class=\"note info\">\n<p>float 有不确定小数后缀，最好不要使用 <code>==</code>  比较</p>\n</div>\n<h2 id=\"str型\"><a class=\"anchor\" href=\"#str型\">#</a> str 型</h2>\n<p>str 型为字符串，可迭代，长度不限</p>\n<h3 id=\"切片\"><a class=\"anchor\" href=\"#切片\">#</a> 切片</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"p\"</span></pre></td></tr></table></figure><p>索引如下所示：</p>\n<blockquote>\n<p>p  y  t  h  o  n 字符串 <br />\n0  1  2  3  4  5 正向索引 <br />\n-6 -5 -4 -3 -2 -1 反向索引</p>\n</blockquote>\n<p>切片的语法格式： <code>str[开始:结束:步长]</code> <br />\n 举个例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 pto</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 nohtyp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 yt</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p>这个方法通常用于计算回文数： <code>str(n) == str(n)[::-1]</code></p>\n</div>\n<h3 id=\"格式化输出\"><a class=\"anchor\" href=\"#格式化输出\">#</a> 格式化输出</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># % 式格式化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数是:%d\"</span><span class=\"token operator\">%</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 这个数是：10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># format 格式化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数是:&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># f-string 格式化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"这个数是:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>% 式格式化如果有多个实参，需要用括号括起来</p>\n</div>\n<h2 id=\"bool型\"><a class=\"anchor\" href=\"#bool型\">#</a> bool 型</h2>\n<p>bool 是 int 型的子类，不可迭代，只有 True 和 False 两种</p>\n<div class=\"note info\">\n<p>0=False 1=True 2 及以上同理</p>\n</div>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/12/python/easy/pythone3/",
            "url": "https://www.kaitaku.xyz/2022/01/12/python/easy/pythone3/",
            "title": "python小白篇3-运算与分支",
            "date_published": "2022-01-12T10:43:36.000Z",
            "content_html": "<h1 id=\"逻辑与比较运算符\"><a class=\"anchor\" href=\"#逻辑与比较运算符\">#</a> 逻辑与比较运算符</h1>\n<h2 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h2>\n<p>在 python 中，逻辑运算符有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号英文</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">两真为真，一假为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:center\">一真为真，两假为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:center\">非真即假</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\">\n<p>python 中的逻辑运算符有优先级，not &gt; and &gt; or, 括号可以改变优先级</p>\n</div>\n<h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<p>基本运算符：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">举例</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">相加</td>\n<td style=\"text-align:center\">1+1=2</td>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:center\">自增操作</td>\n<td style=\"text-align:center\">i += 1(i=i+1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">相减</td>\n<td style=\"text-align:center\">2-1=1</td>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:center\">自减操作</td>\n<td style=\"text-align:center\">i -= 1(i=i-1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">相乘</td>\n<td style=\"text-align:center\">2*3=6</td>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:center\">乘方</td>\n<td style=\"text-align:center\">2**3=8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">相除</td>\n<td style=\"text-align:center\">3/2=1.5</td>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:center\">整除</td>\n<td style=\"text-align:center\">3//2=1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">求余</td>\n<td style=\"text-align:center\">3%2=1</td>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:center\">自乘操作</td>\n<td style=\"text-align:center\">a *= 2</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note info\">\n<p>python 中的运算遵循四则运算顺序，可以用括号更改优先级</p>\n</div>\n<p>在 python 中可以对字符串进行加乘操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>u <span class=\"token operator\">=</span> u<span class=\"token operator\">*</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"pythonpythonpython\"</span></pre></td></tr></table></figure><h2 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">比较大于</td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">比较小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于等于</td>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">相等</td>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:center\">不等</td>\n</tr>\n</tbody>\n</table>\n<p>比较运算符返回值均为 bool 类型，非真即假<br />\n部分类无法进行比较</p>\n<h1 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h1>\n<h2 id=\"单分支与双分支\"><a class=\"anchor\" href=\"#单分支与双分支\">#</a> 单分支与双分支</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入一个数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> u <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数大于等于1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数小于1\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>这样的结构就是双分支，只有 if 就是单分支</p>\n</div>\n<p>在 python 中，if 的语法是这样的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> 条件<span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果真</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果假</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    语句</pre></td></tr></table></figure><p>python 依靠缩进来识别代码文件，所以代码必须使用缩进，建议使用以下几种格式：</p>\n<ul>\n<li>一个空格 (不推荐)</li>\n<li>一个 Tab</li>\n<li>四个空格</li>\n</ul>\n<p>尽量全部使用同一种进行缩进</p>\n<h2 id=\"多分支\"><a class=\"anchor\" href=\"#多分支\">#</a> 多分支</h2>\n<h3 id=\"if-elif型\"><a class=\"anchor\" href=\"#if-elif型\">#</a> if elif 型</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1-3的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">elif</span> u <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">elif</span> u <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知数字\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 python 中，多分支结构使用 <code>elif</code>  进行判断，使用规则同 if<br />\n 下面两幅图为双分支和多分支的区别：<br />\n<img data-src=\"https://s2.loli.net/2022/01/12/sdjSE6kUNaKGLhP.png\" alt=\"a.png\" /></p>\n<div class=\"note info\">\n<p>在一个多分支中只会执行一个代码块 (最早的那一个)<br />\n 所以有时会有 <code>if...if...</code>  这种写法，就可以执行多个代码块</p>\n</div>\n<h3 id=\"match-case型\"><a class=\"anchor\" href=\"#match-case型\">#</a> match case 型</h3>\n<p><strong>本条语法仅适用于 python3.10 以上，3.9 及以下请用 <code>elif多分支结构</code> </strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1-3的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>match u<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    case <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    case <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    case <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入了3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    case _<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知数字\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>match case</code>  语法不同于 C 的 <code>switch case</code>  语句，<br />\n 拥有更加强大的<strong>模式匹配</strong>功能，未来会考虑出一篇专题<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">作者也没研究透</span></p>\n<h1 id=\"练习题\"><a class=\"anchor\" href=\"#练习题\">#</a> 练习题</h1>\n<ol>\n<li class=\"quiz\">以下哪个选项错误 <span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>分支结构有单双多三种</li>\n<li>一个分支结构块只能执行一个代码块</li>\n<li class=\"correct\"><code>match case</code>  与 <code>switch case</code>  没有区别</li>\n<li>!= 是不等号</li>\n</ul>\n</li>\n</ol>\n<p><span class=\"spoiler\" title=\"你知道得太多了\">预告：下节是循环</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/11/python/easy/pythone2/",
            "url": "https://www.kaitaku.xyz/2022/01/11/python/easy/pythone2/",
            "title": "python小白篇2-类型与变量",
            "date_published": "2022-01-11T08:24:23.000Z",
            "content_html": "<h1 id=\"输出一段文字\"><a class=\"anchor\" href=\"#输出一段文字\">#</a> 输出一段文字</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>print 为输出函数，会将括号内的值输出 <br />\n&quot;hello world&quot; 为传入的值，类型为字符串 <br />\n字符串内可以存储绝大部分文本 <br />\npython 的字符串可以用双引号或单引号括起来<br />\n行末不需要分号或逗号，但这样也可以:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"python中的变量\"><a class=\"anchor\" href=\"#python中的变量\">#</a> python 中的变量</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>PyCharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a word\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 输出值为: This is a word</span></pre></td></tr></table></figure><p>在本段代码中 &quot;a&quot; 即为变量 <br />\npython 中的变量不需要提前声明类型，需要时定义即可 <br />\n赋值语法：变量名 = 值 <br />\n变量名规则：</p>\n<ul>\n<li>不可以以数字开头，例如 5count 就是错误的</li>\n<li>只能有字母、数字和下划线，例如 a#b 就是错误的</li>\n<li>不可以以关键字开头，例如 import = 0 就是错误的</li>\n<li>最好不要与函数重名，例如:</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>Pycharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 返回错误：TypeError: 'int' object is not callable</span></pre></td></tr></table></figure><p>python 的数据类型是可变的，但部分类型无法互相转换 (见 3 部分) <br />\n因此，这样的代码是合法的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>Pycharm</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2.25</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 输出值为 2.25</span></pre></td></tr></table></figure><h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">转换函数</th>\n<th style=\"text-align:center\">用法</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">int()</td>\n<td style=\"text-align:center\">储存整数</td>\n<td style=\"text-align:center\">114514</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">float()</td>\n<td style=\"text-align:center\">储存小数</td>\n<td style=\"text-align:center\">810.1919</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bool</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">储存真假值</td>\n<td style=\"text-align:center\">True/False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str</td>\n<td style=\"text-align:center\">str()</td>\n<td style=\"text-align:center\">储存字符串</td>\n<td style=\"text-align:center\">&quot;python&quot;</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"容器数据类型\"><a class=\"anchor\" href=\"#容器数据类型\">#</a> 容器数据类型</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">定义方法</th>\n<th style=\"text-align:center\">转换方法</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:center\">[列表] 或 list ()</td>\n<td style=\"text-align:center\">list()</td>\n<td style=\"text-align:center\">[1,2,3,4]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tuple</td>\n<td style=\"text-align:center\">(列表) 或 tuple ()</td>\n<td style=\"text-align:center\">tuple()</td>\n<td style=\"text-align:center\">(1,2,3,4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dict</td>\n<td style=\"text-align:center\">{键：值} 或 dict ()</td>\n<td style=\"text-align:center\">dict()</td>\n<td style=\"text-align:center\">由于 MD 无法显示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set</td>\n<td style=\"text-align:center\">{值} 或 set ()</td>\n<td style=\"text-align:center\">set()</td>\n<td style=\"text-align:center\">由于 MD 无法显示</td>\n</tr>\n</tbody>\n</table>\n<p>数据类型会专门开一篇<span class=\"spoiler\" title=\"你知道得太多了\">字太多了</span></p>\n<h1 id=\"输入和类型\"><a class=\"anchor\" href=\"#输入和类型\">#</a> 输入和类型</h1>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入字符串:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>input () 方法可以实现控制台输入 <br />\n括号内的内容为输入提示语 \\</p>\n<div class=\"note info\">\n<p>input 方法输入的始终为字符串，需要进行类型转换</p>\n</div>\n<h2 id=\"类型判断\"><a class=\"anchor\" href=\"#类型判断\">#</a> 类型判断</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class:'int'></span></pre></td></tr></table></figure><p>type 方法可以返回变量的类型</p>\n<div class=\"note info\">\n<p>type 方法输出的和返回的并不一致，返回的是类名，见下列代码</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 输出 yes</span></pre></td></tr></table></figure><p>第三篇是分支结构<span class=\"spoiler\" title=\"你知道得太多了\"> x 年后更新</span></p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        },
        {
            "id": "https://www.kaitaku.xyz/2022/01/10/python/easy/pythone1/",
            "url": "https://www.kaitaku.xyz/2022/01/10/python/easy/pythone1/",
            "title": "python小白篇1-安装与配置",
            "date_published": "2022-01-10T11:26:33.000Z",
            "content_html": "<h1 id=\"步骤1安装python解释器\"><a class=\"anchor\" href=\"#步骤1安装python解释器\">#</a> 步骤 1. 安装 python 解释器</h1>\n<p>前往 python 官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy8=\"> 点我直达</span><br />\n选择 Download,All releases,3.10.1 <br />\n请使用 IDM 系多线程下载器<br />\n<span class=\"spoiler\" title=\"你知道得太多了\">不使用也能在 3022 年前下载完</span></p>\n<div class=\"note info\">\n<p>如果下载过于缓慢，试一下蓝奏云：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWl0YWt1LmxhbnpvdW8uY29tL2IwMzBuMzdhaA==\">点我跳转</span><br />\n密码:ktks (文件夹 + 文件)</p>\n</div>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/NXaQOKqzLld9h4E.png\" alt=\"step1.png\" /><br />\n 在此界面中勾选 Add Python 3.10 to PATH <br />\n按下 Install Now 安装，完成后按 Close</p>\n<h1 id=\"步骤2安装pycharm\"><a class=\"anchor\" href=\"#步骤2安装pycharm\">#</a> 步骤 2. 安装 pycharm</h1>\n<p>前往 jetbrains 官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9weWNoYXJtLw==\"> 点我直达</span><br />\n<span class=\"spoiler\" title=\"你知道得太多了\">中文界面还看不懂？</span><br />\n<img data-src=\"https://s2.loli.net/2022/01/10/K5qrbPf9NOZLTyw.png\" alt=\"step2.png\" /><br />\n 选择社区版进行安装 <br />\n安装过程就不说了 (应该能看懂)</p>\n<h1 id=\"步骤3配置pycharm\"><a class=\"anchor\" href=\"#步骤3配置pycharm\">#</a> 步骤 3. 配置 pycharm</h1>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/gbm3Dn2CO8LjUEa.jpg\" alt=\"step3.jpg\" /><br />\n 单击设置 (位置相同，但应该是英文)<br />\n<img data-src=\"https://s2.loli.net/2022/01/10/PLgQeUV35nYWpsF.jpg\" alt=\"step4.jpg\" /><br />\n 选择左侧选项，搜索 Chi, 选择左侧插件安装，重启 Pycharm</p>\n<h1 id=\"步骤4创建新项目\"><a class=\"anchor\" href=\"#步骤4创建新项目\">#</a> 步骤 4. 创建新项目</h1>\n<p><img data-src=\"https://s2.loli.net/2022/01/10/gwzUaXv4WdMY8mP.png\" alt=\"无标题.png\" /><br />\n<span class=\"spoiler\" title=\"你知道得太多了\"> 应该看图就能懂</span><br />\n<img data-src=\"https://s2.loli.net/2022/01/10/XGQxLtjckfCI3ao.png\" alt=\"无标题.png\" /><br />\n 创建新文件 (文件名不要使用 abc)</p>\n<p>正经的编程内容请见二篇</p>\n",
            "tags": [
                "python",
                "小白篇",
                "python"
            ]
        }
    ]
}